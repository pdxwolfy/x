WEBVTT
Kind: captions
Language: en

00:00:03.600 --> 00:00:05.670 align:start position:0%
 
this<00:00:03.919><c> exercise</c><00:00:04.640><c> asks</c><00:00:05.040><c> us</c><00:00:05.200><c> to</c>

00:00:05.670 --> 00:00:05.680 align:start position:0%
this exercise asks us to
 

00:00:05.680 --> 00:00:09.190 align:start position:0%
this exercise asks us to
write<00:00:05.920><c> a</c><00:00:06.080><c> method</c><00:00:06.640><c> that</c><00:00:07.040><c> counts</c><00:00:07.520><c> down</c><00:00:07.919><c> to</c><00:00:08.160><c> zero</c>

00:00:09.190 --> 00:00:09.200 align:start position:0%
write a method that counts down to zero
 

00:00:09.200 --> 00:00:13.589 align:start position:0%
write a method that counts down to zero
using<00:00:09.599><c> recursion</c><00:00:11.360><c> so</c><00:00:11.519><c> let's</c><00:00:11.840><c> call</c><00:00:12.160><c> our</c><00:00:12.400><c> method</c>

00:00:13.589 --> 00:00:13.599 align:start position:0%
using recursion so let's call our method
 

00:00:13.599 --> 00:00:16.870 align:start position:0%
using recursion so let's call our method
count<00:00:14.000><c> two</c><00:00:14.920><c> zero</c>

00:00:16.870 --> 00:00:16.880 align:start position:0%
count two zero
 

00:00:16.880 --> 00:00:19.349 align:start position:0%
count two zero
and<00:00:17.119><c> we're</c><00:00:17.279><c> going</c><00:00:17.600><c> to</c><00:00:18.000><c> pass</c><00:00:18.320><c> in</c><00:00:18.480><c> an</c><00:00:18.720><c> argument</c>

00:00:19.349 --> 00:00:19.359 align:start position:0%
and we're going to pass in an argument
 

00:00:19.359 --> 00:00:20.950 align:start position:0%
and we're going to pass in an argument
which<00:00:19.600><c> is</c><00:00:19.680><c> going</c><00:00:19.920><c> to</c><00:00:20.000><c> be</c><00:00:20.160><c> the</c><00:00:20.320><c> number</c><00:00:20.640><c> that</c><00:00:20.720><c> we</c>

00:00:20.950 --> 00:00:20.960 align:start position:0%
which is going to be the number that we
 

00:00:20.960 --> 00:00:23.189 align:start position:0%
which is going to be the number that we
want<00:00:21.119><c> to</c><00:00:21.359><c> count</c><00:00:21.680><c> down</c><00:00:22.000><c> from</c>

00:00:23.189 --> 00:00:23.199 align:start position:0%
want to count down from
 

00:00:23.199 --> 00:00:28.710 align:start position:0%
want to count down from
so<00:00:23.359><c> we'll</c><00:00:23.519><c> call</c><00:00:23.760><c> this</c><00:00:24.000><c> perimeter</c><00:00:24.560><c> number</c>

00:00:28.710 --> 00:00:28.720 align:start position:0%
 
 

00:00:28.720 --> 00:00:32.150 align:start position:0%
 
and<00:00:29.039><c> let's</c><00:00:29.439><c> first</c><00:00:29.840><c> just</c><00:00:30.080><c> think</c><00:00:30.400><c> about</c>

00:00:32.150 --> 00:00:32.160 align:start position:0%
and let's first just think about
 

00:00:32.160 --> 00:00:35.270 align:start position:0%
and let's first just think about
counting<00:00:32.559><c> down</c><00:00:32.880><c> from</c><00:00:33.200><c> 10.</c><00:00:34.640><c> so</c><00:00:34.800><c> when</c><00:00:35.040><c> we</c>

00:00:35.270 --> 00:00:35.280 align:start position:0%
counting down from 10. so when we
 

00:00:35.280 --> 00:00:37.350 align:start position:0%
counting down from 10. so when we
invoke<00:00:35.600><c> this</c><00:00:35.840><c> method</c><00:00:36.239><c> we</c><00:00:36.480><c> want</c><00:00:36.640><c> it</c><00:00:36.800><c> to</c><00:00:37.040><c> count</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
invoke this method we want it to count
 

00:00:37.360 --> 00:00:39.030 align:start position:0%
invoke this method we want it to count
down<00:00:37.680><c> from</c><00:00:38.000><c> 10</c><00:00:38.320><c> to</c><00:00:38.480><c> 0</c>

00:00:39.030 --> 00:00:39.040 align:start position:0%
down from 10 to 0
 

00:00:39.040 --> 00:00:43.670 align:start position:0%
down from 10 to 0
and<00:00:39.360><c> output</c><00:00:39.760><c> each</c><00:00:40.000><c> number</c>

00:00:43.670 --> 00:00:43.680 align:start position:0%
 
 

00:00:43.680 --> 00:00:45.670 align:start position:0%
 
so<00:00:43.920><c> in</c><00:00:44.000><c> order</c><00:00:44.320><c> to</c><00:00:44.559><c> output</c><00:00:44.879><c> the</c><00:00:45.039><c> number</c><00:00:45.520><c> we</c>

00:00:45.670 --> 00:00:45.680 align:start position:0%
so in order to output the number we
 

00:00:45.680 --> 00:00:49.590 align:start position:0%
so in order to output the number we
would<00:00:45.920><c> invoke</c><00:00:46.399><c> put</c><00:00:46.640><c> us</c>

00:00:49.590 --> 00:00:49.600 align:start position:0%
 
 

00:00:49.600 --> 00:00:51.590 align:start position:0%
 
now<00:00:49.840><c> if</c><00:00:49.920><c> we</c><00:00:50.079><c> run</c><00:00:50.320><c> our</c><00:00:50.399><c> code</c><00:00:50.719><c> we</c><00:00:50.800><c> just</c><00:00:51.039><c> expect</c><00:00:51.440><c> to</c>

00:00:51.590 --> 00:00:51.600 align:start position:0%
now if we run our code we just expect to
 

00:00:51.600 --> 00:00:55.750 align:start position:0%
now if we run our code we just expect to
output<00:00:52.000><c> 10.</c>

00:00:55.750 --> 00:00:55.760 align:start position:0%
 
 

00:00:55.760 --> 00:01:00.069 align:start position:0%
 
and<00:00:55.840><c> that's</c><00:00:56.079><c> what</c><00:00:56.239><c> we</c><00:00:56.840><c> see</c>

00:01:00.069 --> 00:01:00.079 align:start position:0%
 
 

00:01:00.079 --> 00:01:02.950 align:start position:0%
 
so<00:01:00.320><c> in</c><00:01:00.480><c> order</c><00:01:00.960><c> to</c><00:01:01.440><c> recursively</c><00:01:02.239><c> count</c><00:01:02.559><c> down</c><00:01:02.800><c> to</c>

00:01:02.950 --> 00:01:02.960 align:start position:0%
so in order to recursively count down to
 

00:01:02.960 --> 00:01:03.830 align:start position:0%
so in order to recursively count down to
zero

00:01:03.830 --> 00:01:03.840 align:start position:0%
zero
 

00:01:03.840 --> 00:01:09.190 align:start position:0%
zero
we<00:01:04.080><c> want</c><00:01:04.320><c> to</c><00:01:04.879><c> call</c><00:01:05.199><c> this</c><00:01:05.439><c> method</c>

00:01:09.190 --> 00:01:09.200 align:start position:0%
 
 

00:01:09.200 --> 00:01:11.830 align:start position:0%
 
and<00:01:09.439><c> as</c><00:01:09.600><c> an</c><00:01:09.760><c> argument</c><00:01:10.400><c> we'll</c><00:01:10.720><c> pass</c><00:01:11.119><c> in</c><00:01:11.439><c> one</c>

00:01:11.830 --> 00:01:11.840 align:start position:0%
and as an argument we'll pass in one
 

00:01:11.840 --> 00:01:15.350 align:start position:0%
and as an argument we'll pass in one
less<00:01:12.159><c> than</c><00:01:12.400><c> the</c><00:01:12.560><c> current</c><00:01:12.960><c> number</c>

00:01:15.350 --> 00:01:15.360 align:start position:0%
less than the current number
 

00:01:15.360 --> 00:01:17.429 align:start position:0%
less than the current number
now<00:01:15.600><c> when</c><00:01:15.759><c> this</c><00:01:16.000><c> method</c><00:01:16.400><c> call</c><00:01:16.720><c> on</c><00:01:16.880><c> line</c><00:01:17.119><c> three</c>

00:01:17.429 --> 00:01:17.439 align:start position:0%
now when this method call on line three
 

00:01:17.439 --> 00:01:19.030 align:start position:0%
now when this method call on line three
is<00:01:17.680><c> executed</c>

00:01:19.030 --> 00:01:19.040 align:start position:0%
is executed
 

00:01:19.040 --> 00:01:21.910 align:start position:0%
is executed
number<00:01:19.680><c> will</c><00:01:19.840><c> be</c><00:01:20.080><c> one</c><00:01:20.479><c> less</c><00:01:21.280><c> so</c><00:01:21.520><c> we</c><00:01:21.680><c> would</c>

00:01:21.910 --> 00:01:21.920 align:start position:0%
number will be one less so we would
 

00:01:21.920 --> 00:01:23.190 align:start position:0%
number will be one less so we would
count<00:01:22.159><c> down</c><00:01:22.400><c> from</c><00:01:22.720><c> 10</c>

00:01:23.190 --> 00:01:23.200 align:start position:0%
count down from 10
 

00:01:23.200 --> 00:01:25.590 align:start position:0%
count down from 10
to<00:01:23.439><c> nine</c><00:01:23.759><c> to</c><00:01:24.000><c> eight</c><00:01:24.720><c> and</c><00:01:24.880><c> this</c><00:01:25.040><c> will</c><00:01:25.280><c> output</c>

00:01:25.590 --> 00:01:25.600 align:start position:0%
to nine to eight and this will output
 

00:01:25.600 --> 00:01:28.070 align:start position:0%
to nine to eight and this will output
the<00:01:25.840><c> number</c>

00:01:28.070 --> 00:01:28.080 align:start position:0%
the number
 

00:01:28.080 --> 00:01:31.270 align:start position:0%
the number
let's<00:01:28.320><c> run</c><00:01:28.560><c> our</c><00:01:28.720><c> code</c><00:01:30.560><c> and</c><00:01:30.720><c> you</c><00:01:30.880><c> can</c><00:01:30.960><c> see</c><00:01:31.119><c> that</c>

00:01:31.270 --> 00:01:31.280 align:start position:0%
let's run our code and you can see that
 

00:01:31.280 --> 00:01:38.550 align:start position:0%
let's run our code and you can see that
we<00:01:31.520><c> raised</c><00:01:31.840><c> an</c><00:01:32.000><c> error</c><00:01:32.400><c> stack</c><00:01:32.799><c> level</c><00:01:33.119><c> too</c><00:01:33.439><c> deep</c>

00:01:38.550 --> 00:01:38.560 align:start position:0%
 
 

00:01:38.560 --> 00:01:40.630 align:start position:0%
 
we<00:01:38.720><c> need</c><00:01:38.880><c> to</c><00:01:39.040><c> think</c><00:01:39.280><c> about</c><00:01:39.600><c> what</c><00:01:39.920><c> type</c><00:01:40.159><c> of</c><00:01:40.320><c> stop</c>

00:01:40.630 --> 00:01:40.640 align:start position:0%
we need to think about what type of stop
 

00:01:40.640 --> 00:01:42.469 align:start position:0%
we need to think about what type of stop
condition<00:01:41.119><c> we're</c><00:01:41.280><c> going</c><00:01:41.520><c> to</c><00:01:41.759><c> provide</c><00:01:42.240><c> this</c>

00:01:42.469 --> 00:01:42.479 align:start position:0%
condition we're going to provide this
 

00:01:42.479 --> 00:01:44.550 align:start position:0%
condition we're going to provide this
recursive<00:01:43.040><c> method</c>

00:01:44.550 --> 00:01:44.560 align:start position:0%
recursive method
 

00:01:44.560 --> 00:01:46.069 align:start position:0%
recursive method
well<00:01:44.799><c> we</c><00:01:44.960><c> know</c><00:01:45.119><c> that</c><00:01:45.280><c> we</c><00:01:45.439><c> want</c><00:01:45.600><c> to</c><00:01:45.759><c> stop</c>

00:01:46.069 --> 00:01:46.079 align:start position:0%
well we know that we want to stop
 

00:01:46.079 --> 00:01:49.030 align:start position:0%
well we know that we want to stop
counting<00:01:46.560><c> down</c><00:01:46.799><c> when</c><00:01:46.960><c> we've</c><00:01:47.200><c> reached</c><00:01:47.600><c> zero</c>

00:01:49.030 --> 00:01:49.040 align:start position:0%
counting down when we've reached zero
 

00:01:49.040 --> 00:01:53.270 align:start position:0%
counting down when we've reached zero
so<00:01:49.200><c> let's</c><00:01:49.439><c> use</c><00:01:49.680><c> an</c><00:01:49.840><c> if</c><00:01:50.079><c> statement</c>

00:01:53.270 --> 00:01:53.280 align:start position:0%
 
 

00:01:53.280 --> 00:01:55.670 align:start position:0%
 
and<00:01:53.439><c> we'll</c><00:01:53.759><c> provided</c><00:01:54.240><c> the</c><00:01:54.399><c> condition</c><00:01:55.280><c> if</c>

00:01:55.670 --> 00:01:55.680 align:start position:0%
and we'll provided the condition if
 

00:01:55.680 --> 00:01:56.389 align:start position:0%
and we'll provided the condition if
number

00:01:56.389 --> 00:01:56.399 align:start position:0%
number
 

00:01:56.399 --> 00:02:00.870 align:start position:0%
number
is<00:01:56.719><c> less</c><00:01:56.960><c> than</c><00:01:57.600><c> or</c><00:01:57.840><c> equal</c><00:01:58.159><c> to</c><00:01:58.320><c> zero</c>

00:02:00.870 --> 00:02:00.880 align:start position:0%
 
 

00:02:00.880 --> 00:02:05.510 align:start position:0%
 
we're<00:02:01.040><c> going</c><00:02:01.280><c> to</c><00:02:01.439><c> output</c><00:02:01.840><c> the</c><00:02:02.000><c> number</c>

00:02:05.510 --> 00:02:05.520 align:start position:0%
 
 

00:02:05.520 --> 00:02:08.630 align:start position:0%
 
otherwise<00:02:06.320><c> we</c><00:02:06.479><c> want</c><00:02:06.640><c> to</c><00:02:06.880><c> output</c><00:02:07.200><c> the</c><00:02:07.360><c> number</c>

00:02:08.630 --> 00:02:08.640 align:start position:0%
otherwise we want to output the number
 

00:02:08.640 --> 00:02:16.790 align:start position:0%
otherwise we want to output the number
and<00:02:09.039><c> invoke</c><00:02:09.440><c> count</c><00:02:09.679><c> to</c><00:02:09.840><c> 0</c><00:02:10.239><c> again</c>

00:02:16.790 --> 00:02:16.800 align:start position:0%
 
 

00:02:16.800 --> 00:02:19.750 align:start position:0%
 
so<00:02:17.040><c> we'll</c><00:02:17.280><c> continue</c><00:02:17.920><c> outputting</c><00:02:18.560><c> number</c><00:02:19.360><c> and</c>

00:02:19.750 --> 00:02:19.760 align:start position:0%
so we'll continue outputting number and
 

00:02:19.760 --> 00:02:21.510 align:start position:0%
so we'll continue outputting number and
invoking<00:02:20.319><c> count</c><00:02:20.640><c> to</c><00:02:20.879><c> 0</c>

00:02:21.510 --> 00:02:21.520 align:start position:0%
invoking count to 0
 

00:02:21.520 --> 00:02:23.910 align:start position:0%
invoking count to 0
with<00:02:21.920><c> number</c><00:02:22.319><c> being</c><00:02:22.879><c> one</c><00:02:23.280><c> less</c><00:02:23.599><c> than</c><00:02:23.760><c> the</c>

00:02:23.910 --> 00:02:23.920 align:start position:0%
with number being one less than the
 

00:02:23.920 --> 00:02:25.030 align:start position:0%
with number being one less than the
current<00:02:24.239><c> number</c>

00:02:25.030 --> 00:02:25.040 align:start position:0%
current number
 

00:02:25.040 --> 00:02:27.110 align:start position:0%
current number
up<00:02:25.200><c> until</c><00:02:25.599><c> number</c><00:02:26.000><c> is</c><00:02:26.160><c> less</c><00:02:26.400><c> than</c><00:02:26.560><c> or</c><00:02:26.720><c> equal</c><00:02:26.959><c> to</c>

00:02:27.110 --> 00:02:27.120 align:start position:0%
up until number is less than or equal to
 

00:02:27.120 --> 00:02:28.150 align:start position:0%
up until number is less than or equal to
zero

00:02:28.150 --> 00:02:28.160 align:start position:0%
zero
 

00:02:28.160 --> 00:02:30.309 align:start position:0%
zero
at<00:02:28.319><c> that</c><00:02:28.640><c> point</c><00:02:29.200><c> we'll</c><00:02:29.440><c> just</c><00:02:29.760><c> output</c><00:02:30.080><c> the</c>

00:02:30.309 --> 00:02:30.319 align:start position:0%
at that point we'll just output the
 

00:02:30.319 --> 00:02:33.430 align:start position:0%
at that point we'll just output the
number<00:02:30.800><c> and</c><00:02:30.879><c> return</c><00:02:31.360><c> from</c><00:02:31.519><c> the</c><00:02:31.680><c> method</c>

00:02:33.430 --> 00:02:33.440 align:start position:0%
number and return from the method
 

00:02:33.440 --> 00:02:35.589 align:start position:0%
number and return from the method
let's<00:02:33.680><c> run</c><00:02:33.920><c> our</c><00:02:34.000><c> code</c><00:02:34.319><c> now</c><00:02:34.640><c> and</c><00:02:34.800><c> we</c><00:02:35.040><c> expect</c><00:02:35.440><c> to</c>

00:02:35.589 --> 00:02:35.599 align:start position:0%
let's run our code now and we expect to
 

00:02:35.599 --> 00:02:36.710 align:start position:0%
let's run our code now and we expect to
output<00:02:36.080><c> 10</c>

00:02:36.710 --> 00:02:36.720 align:start position:0%
output 10
 

00:02:36.720 --> 00:02:40.309 align:start position:0%
output 10
down<00:02:36.959><c> to</c><00:02:37.120><c> zero</c>

00:02:40.309 --> 00:02:40.319 align:start position:0%
 
 

00:02:40.319 --> 00:02:44.869 align:start position:0%
 
and<00:02:40.400><c> that's</c><00:02:40.640><c> what</c><00:02:40.800><c> we</c><00:02:40.959><c> see</c>

00:02:44.869 --> 00:02:44.879 align:start position:0%
 
 

00:02:44.879 --> 00:02:47.509 align:start position:0%
 
let's<00:02:45.120><c> run</c><00:02:45.360><c> our</c><00:02:45.519><c> code</c><00:02:46.319><c> one</c><00:02:46.560><c> more</c><00:02:46.800><c> time</c><00:02:47.120><c> let's</c>

00:02:47.509 --> 00:02:47.519 align:start position:0%
let's run our code one more time let's
 

00:02:47.519 --> 00:02:52.869 align:start position:0%
let's run our code one more time let's
count<00:02:47.760><c> from</c><00:02:48.080><c> 20</c><00:02:48.480><c> to</c><00:02:48.840><c> zero</c>

00:02:52.869 --> 00:02:52.879 align:start position:0%
 
 

00:02:52.879 --> 00:02:54.660 align:start position:0%
 
and<00:02:53.040><c> we</c><00:02:53.280><c> see</c><00:02:53.440><c> the</c><00:02:53.599><c> expected</c><00:02:54.160><c> output</c>

00:02:54.660 --> 00:02:54.670 align:start position:0%
and we see the expected output
 

00:02:54.670 --> 00:02:57.830 align:start position:0%
and we see the expected output
[Music]

00:02:57.830 --> 00:02:57.840 align:start position:0%
[Music]
 

00:02:57.840 --> 00:03:00.229 align:start position:0%
[Music]
now<00:02:58.080><c> lastly</c><00:02:58.720><c> you</c><00:02:58.879><c> may</c><00:02:59.040><c> have</c><00:02:59.280><c> wondered</c><00:02:59.680><c> on</c><00:02:59.840><c> line</c>

00:03:00.229 --> 00:03:00.239 align:start position:0%
now lastly you may have wondered on line
 

00:03:00.239 --> 00:03:02.710 align:start position:0%
now lastly you may have wondered on line
2<00:03:00.720><c> why</c><00:03:00.959><c> we</c><00:03:01.120><c> needed</c><00:03:01.519><c> to</c><00:03:01.760><c> check</c><00:03:02.000><c> whether</c><00:03:02.400><c> number</c>

00:03:02.710 --> 00:03:02.720 align:start position:0%
2 why we needed to check whether number
 

00:03:02.720 --> 00:03:03.110 align:start position:0%
2 why we needed to check whether number
was

00:03:03.110 --> 00:03:03.120 align:start position:0%
was
 

00:03:03.120 --> 00:03:05.830 align:start position:0%
was
less<00:03:03.360><c> than</c><00:03:03.519><c> or</c><00:03:03.680><c> equal</c><00:03:04.000><c> to</c><00:03:04.239><c> zero</c><00:03:05.200><c> and</c><00:03:05.360><c> we</c><00:03:05.519><c> wanted</c>

00:03:05.830 --> 00:03:05.840 align:start position:0%
less than or equal to zero and we wanted
 

00:03:05.840 --> 00:03:07.830 align:start position:0%
less than or equal to zero and we wanted
to<00:03:06.000><c> do</c><00:03:06.159><c> that</c><00:03:06.400><c> in</c><00:03:06.560><c> case</c><00:03:06.800><c> a</c><00:03:07.040><c> negative</c><00:03:07.519><c> number</c>

00:03:07.830 --> 00:03:07.840 align:start position:0%
to do that in case a negative number
 

00:03:07.840 --> 00:03:08.470 align:start position:0%
to do that in case a negative number
were<00:03:08.080><c> passed</c>

00:03:08.470 --> 00:03:08.480 align:start position:0%
were passed
 

00:03:08.480 --> 00:03:15.350 align:start position:0%
were passed
as<00:03:08.640><c> the</c><00:03:08.879><c> argument</c><00:03:09.360><c> to</c><00:03:09.599><c> count</c><00:03:09.840><c> to</c><00:03:10.000><c> zero</c>

00:03:15.350 --> 00:03:15.360 align:start position:0%
 
 

00:03:15.360 --> 00:03:17.270 align:start position:0%
 
if<00:03:15.519><c> a</c><00:03:15.680><c> negative</c><00:03:16.159><c> number</c><00:03:16.480><c> is</c><00:03:16.640><c> passed</c><00:03:16.959><c> to</c><00:03:17.120><c> the</c>

00:03:17.270 --> 00:03:17.280 align:start position:0%
if a negative number is passed to the
 

00:03:17.280 --> 00:03:19.509 align:start position:0%
if a negative number is passed to the
method<00:03:17.920><c> then</c><00:03:18.080><c> we</c><00:03:18.319><c> simply</c><00:03:18.640><c> want</c><00:03:18.800><c> to</c><00:03:19.040><c> output</c><00:03:19.360><c> the</c>

00:03:19.509 --> 00:03:19.519 align:start position:0%
method then we simply want to output the
 

00:03:19.519 --> 00:03:21.589 align:start position:0%
method then we simply want to output the
number<00:03:19.920><c> and</c><00:03:20.000><c> return</c><00:03:20.400><c> from</c><00:03:20.560><c> the</c><00:03:20.640><c> method</c>

00:03:21.589 --> 00:03:21.599 align:start position:0%
number and return from the method
 

00:03:21.599 --> 00:03:23.270 align:start position:0%
number and return from the method
let's<00:03:21.840><c> run</c><00:03:22.080><c> this</c><00:03:22.239><c> code</c><00:03:22.480><c> to</c><00:03:22.640><c> make</c><00:03:22.800><c> sure</c><00:03:22.959><c> that's</c>

00:03:23.270 --> 00:03:23.280 align:start position:0%
let's run this code to make sure that's
 

00:03:23.280 --> 00:03:27.270 align:start position:0%
let's run this code to make sure that's
the<00:03:23.440><c> behavior</c><00:03:23.840><c> we</c><00:03:24.080><c> see</c>

00:03:27.270 --> 00:03:27.280 align:start position:0%
 
 

00:03:27.280 --> 00:03:37.670 align:start position:0%
 
and<00:03:27.519><c> it</c><00:03:30.840><c> is</c>

00:03:37.670 --> 00:03:37.680 align:start position:0%
 
 

00:03:37.680 --> 00:03:39.760 align:start position:0%
 
you

