WEBVTT
Kind: captions
Language: en

00:00:04.080 --> 00:00:05.349 align:start position:0%
 
we've<00:00:04.400><c> been</c><00:00:04.640><c> given</c>

00:00:05.349 --> 00:00:05.359 align:start position:0%
we've been given
 

00:00:05.359 --> 00:00:07.510 align:start position:0%
we've been given
three<00:00:05.839><c> pieces</c><00:00:06.240><c> of</c><00:00:06.399><c> code</c><00:00:06.879><c> and</c><00:00:07.040><c> we</c><00:00:07.200><c> need</c><00:00:07.359><c> to</c>

00:00:07.510 --> 00:00:07.520 align:start position:0%
three pieces of code and we need to
 

00:00:07.520 --> 00:00:09.589 align:start position:0%
three pieces of code and we need to
determine<00:00:08.080><c> what</c><00:00:08.400><c> each</c><00:00:08.639><c> piece</c><00:00:08.880><c> of</c><00:00:09.120><c> code</c><00:00:09.440><c> is</c>

00:00:09.589 --> 00:00:09.599 align:start position:0%
determine what each piece of code is
 

00:00:09.599 --> 00:00:11.749 align:start position:0%
determine what each piece of code is
going<00:00:09.840><c> to</c><00:00:10.000><c> print</c><00:00:10.240><c> to</c><00:00:10.400><c> the</c><00:00:10.559><c> screen</c>

00:00:11.749 --> 00:00:11.759 align:start position:0%
going to print to the screen
 

00:00:11.759 --> 00:00:13.669 align:start position:0%
going to print to the screen
so<00:00:12.000><c> i've</c><00:00:12.240><c> pasted</c><00:00:12.719><c> up</c><00:00:12.880><c> the</c><00:00:13.040><c> first</c><00:00:13.280><c> piece</c><00:00:13.519><c> of</c>

00:00:13.669 --> 00:00:13.679 align:start position:0%
so i've pasted up the first piece of
 

00:00:13.679 --> 00:00:15.509 align:start position:0%
so i've pasted up the first piece of
code<00:00:13.920><c> that</c><00:00:14.000><c> we've</c><00:00:14.160><c> been</c><00:00:14.400><c> given</c>

00:00:15.509 --> 00:00:15.519 align:start position:0%
code that we've been given
 

00:00:15.519 --> 00:00:19.349 align:start position:0%
code that we've been given
and<00:00:15.759><c> this</c><00:00:15.839><c> code</c><00:00:16.160><c> uses</c><00:00:16.640><c> a</c><00:00:16.880><c> ternary</c><00:00:17.440><c> operator</c>

00:00:19.349 --> 00:00:19.359 align:start position:0%
and this code uses a ternary operator
 

00:00:19.359 --> 00:00:21.269 align:start position:0%
and this code uses a ternary operator
if<00:00:19.520><c> the</c><00:00:19.760><c> expression</c><00:00:20.320><c> that</c><00:00:20.480><c> we</c><00:00:20.720><c> provide</c><00:00:21.119><c> the</c>

00:00:21.269 --> 00:00:21.279 align:start position:0%
if the expression that we provide the
 

00:00:21.279 --> 00:00:24.230 align:start position:0%
if the expression that we provide the
operator<00:00:21.920><c> evaluates</c><00:00:22.720><c> as</c><00:00:23.039><c> true</c>

00:00:24.230 --> 00:00:24.240 align:start position:0%
operator evaluates as true
 

00:00:24.240 --> 00:00:26.150 align:start position:0%
operator evaluates as true
then<00:00:24.400><c> the</c><00:00:24.640><c> code</c><00:00:24.960><c> on</c><00:00:25.119><c> the</c><00:00:25.279><c> left</c><00:00:25.599><c> side</c><00:00:25.840><c> of</c><00:00:25.920><c> the</c>

00:00:26.150 --> 00:00:26.160 align:start position:0%
then the code on the left side of the
 

00:00:26.160 --> 00:00:28.870 align:start position:0%
then the code on the left side of the
colon

00:00:28.870 --> 00:00:28.880 align:start position:0%
 
 

00:00:28.880 --> 00:00:31.990 align:start position:0%
 
will<00:00:29.039><c> be</c><00:00:29.279><c> executed</c><00:00:30.880><c> if</c><00:00:31.039><c> the</c><00:00:31.279><c> condition</c><00:00:31.840><c> that</c>

00:00:31.990 --> 00:00:32.000 align:start position:0%
will be executed if the condition that
 

00:00:32.000 --> 00:00:33.750 align:start position:0%
will be executed if the condition that
we've<00:00:32.239><c> provided</c><00:00:32.719><c> evaluates</c><00:00:33.440><c> as</c>

00:00:33.750 --> 00:00:33.760 align:start position:0%
we've provided evaluates as
 

00:00:33.760 --> 00:00:36.069 align:start position:0%
we've provided evaluates as
false<00:00:34.719><c> then</c><00:00:34.880><c> the</c><00:00:35.040><c> code</c><00:00:35.360><c> on</c><00:00:35.520><c> the</c><00:00:35.600><c> right</c><00:00:35.760><c> side</c><00:00:36.000><c> of</c>

00:00:36.069 --> 00:00:36.079 align:start position:0%
false then the code on the right side of
 

00:00:36.079 --> 00:00:38.549 align:start position:0%
false then the code on the right side of
the<00:00:36.239><c> colon</c><00:00:36.559><c> will</c><00:00:36.719><c> be</c><00:00:36.880><c> executed</c>

00:00:38.549 --> 00:00:38.559 align:start position:0%
the colon will be executed
 

00:00:38.559 --> 00:00:40.709 align:start position:0%
the colon will be executed
so<00:00:38.719><c> the</c><00:00:38.879><c> condition</c><00:00:39.440><c> we've</c><00:00:39.680><c> provided</c><00:00:40.480><c> our</c>

00:00:40.709 --> 00:00:40.719 align:start position:0%
so the condition we've provided our
 

00:00:40.719 --> 00:00:43.750 align:start position:0%
so the condition we've provided our
ternary<00:00:41.280><c> operator</c><00:00:41.920><c> is</c><00:00:42.079><c> a</c><00:00:42.160><c> comparison</c>

00:00:43.750 --> 00:00:43.760 align:start position:0%
ternary operator is a comparison
 

00:00:43.760 --> 00:00:47.590 align:start position:0%
ternary operator is a comparison
the<00:00:44.079><c> string</c><00:00:44.559><c> 4</c><00:00:45.039><c> is</c><00:00:45.200><c> equal</c><00:00:45.440><c> to</c><00:00:45.600><c> the</c><00:00:45.760><c> integer</c><00:00:46.239><c> 4.</c>

00:00:47.590 --> 00:00:47.600 align:start position:0%
the string 4 is equal to the integer 4.
 

00:00:47.600 --> 00:00:50.630 align:start position:0%
the string 4 is equal to the integer 4.
comparing<00:00:48.320><c> a</c><00:00:48.719><c> string</c><00:00:49.600><c> to</c><00:00:49.840><c> an</c><00:00:50.000><c> integer</c><00:00:50.480><c> for</c>

00:00:50.630 --> 00:00:50.640 align:start position:0%
comparing a string to an integer for
 

00:00:50.640 --> 00:00:52.950 align:start position:0%
comparing a string to an integer for
equality<00:00:51.360><c> is</c><00:00:51.600><c> always</c><00:00:51.920><c> going</c><00:00:52.160><c> to</c><00:00:52.320><c> return</c>

00:00:52.950 --> 00:00:52.960 align:start position:0%
equality is always going to return
 

00:00:52.960 --> 00:00:56.069 align:start position:0%
equality is always going to return
false<00:00:53.920><c> so</c><00:00:54.079><c> we</c><00:00:54.320><c> expect</c><00:00:55.039><c> that</c><00:00:55.360><c> ruby</c><00:00:55.760><c> will</c>

00:00:56.069 --> 00:00:56.079 align:start position:0%
false so we expect that ruby will
 

00:00:56.079 --> 00:00:57.990 align:start position:0%
false so we expect that ruby will
execute<00:00:56.559><c> the</c><00:00:56.800><c> code</c><00:00:57.120><c> on</c><00:00:57.280><c> the</c><00:00:57.440><c> right</c><00:00:57.680><c> side</c><00:00:57.920><c> of</c>

00:00:57.990 --> 00:00:58.000 align:start position:0%
execute the code on the right side of
 

00:00:58.000 --> 00:00:59.910 align:start position:0%
execute the code on the right side of
the<00:00:58.160><c> colon</c>

00:00:59.910 --> 00:00:59.920 align:start position:0%
the colon
 

00:00:59.920 --> 00:01:03.189 align:start position:0%
the colon
in<00:01:00.079><c> this</c><00:01:00.320><c> case</c><00:01:01.120><c> we're</c><00:01:01.440><c> invoking</c><00:01:01.920><c> put</c><00:01:02.160><c> us</c>

00:01:03.189 --> 00:01:03.199 align:start position:0%
in this case we're invoking put us
 

00:01:03.199 --> 00:01:06.390 align:start position:0%
in this case we're invoking put us
and<00:01:03.440><c> passing</c><00:01:03.840><c> it</c><00:01:03.920><c> the</c><00:01:04.159><c> string</c><00:01:04.640><c> false</c><00:01:06.000><c> so</c><00:01:06.159><c> we</c>

00:01:06.390 --> 00:01:06.400 align:start position:0%
and passing it the string false so we
 

00:01:06.400 --> 00:01:07.670 align:start position:0%
and passing it the string false so we
expect<00:01:06.799><c> to</c><00:01:07.040><c> output</c>

00:01:07.670 --> 00:01:07.680 align:start position:0%
expect to output
 

00:01:07.680 --> 00:01:12.789 align:start position:0%
expect to output
false<00:01:09.600><c> let's</c><00:01:09.920><c> run</c><00:01:10.159><c> our</c><00:01:10.840><c> code</c>

00:01:12.789 --> 00:01:12.799 align:start position:0%
false let's run our code
 

00:01:12.799 --> 00:01:17.670 align:start position:0%
false let's run our code
and<00:01:12.960><c> we</c><00:01:13.200><c> see</c><00:01:13.360><c> the</c><00:01:13.520><c> output</c><00:01:14.000><c> false</c>

00:01:17.670 --> 00:01:17.680 align:start position:0%
 
 

00:01:17.680 --> 00:01:23.670 align:start position:0%
 
i'll<00:01:17.920><c> paste</c><00:01:18.320><c> in</c><00:01:18.560><c> our</c><00:01:18.799><c> next</c><00:01:19.119><c> snippet</c><00:01:19.520><c> of</c><00:01:19.680><c> code</c>

00:01:23.670 --> 00:01:23.680 align:start position:0%
 
 

00:01:23.680 --> 00:01:26.390 align:start position:0%
 
a<00:01:23.920><c> local</c><00:01:24.240><c> variable</c><00:01:24.799><c> x</c><00:01:25.119><c> has</c><00:01:25.280><c> been</c><00:01:25.520><c> initialized</c>

00:01:26.390 --> 00:01:26.400 align:start position:0%
a local variable x has been initialized
 

00:01:26.400 --> 00:01:29.830 align:start position:0%
a local variable x has been initialized
and<00:01:26.720><c> set</c><00:01:26.960><c> to</c><00:01:27.119><c> reference</c><00:01:27.520><c> the</c><00:01:27.680><c> integer</c><00:01:28.240><c> 2.</c>

00:01:29.830 --> 00:01:29.840 align:start position:0%
and set to reference the integer 2.
 

00:01:29.840 --> 00:01:32.789 align:start position:0%
and set to reference the integer 2.
below<00:01:30.159><c> that</c><00:01:30.400><c> we</c><00:01:30.560><c> have</c><00:01:30.720><c> an</c><00:01:30.880><c> if</c><00:01:31.119><c> statement</c><00:01:32.640><c> the</c>

00:01:32.789 --> 00:01:32.799 align:start position:0%
below that we have an if statement the
 

00:01:32.799 --> 00:01:34.310 align:start position:0%
below that we have an if statement the
condition<00:01:33.280><c> we</c><00:01:33.520><c> provide</c><00:01:33.840><c> to</c><00:01:34.000><c> this</c>

00:01:34.310 --> 00:01:34.320 align:start position:0%
condition we provide to this
 

00:01:34.320 --> 00:01:37.190 align:start position:0%
condition we provide to this
if<00:01:34.479><c> statement</c><00:01:35.040><c> is</c><00:01:35.280><c> comparing</c><00:01:35.920><c> the</c><00:01:36.079><c> equality</c>

00:01:37.190 --> 00:01:37.200 align:start position:0%
if statement is comparing the equality
 

00:01:37.200 --> 00:01:39.109 align:start position:0%
if statement is comparing the equality
of<00:01:37.360><c> the</c><00:01:37.520><c> result</c><00:01:38.079><c> of</c><00:01:38.400><c> two</c><00:01:38.799><c> different</c>

00:01:39.109 --> 00:01:39.119 align:start position:0%
of the result of two different
 

00:01:39.119 --> 00:01:41.830 align:start position:0%
of the result of two different
arithmetic<00:01:39.840><c> operations</c>

00:01:41.830 --> 00:01:41.840 align:start position:0%
arithmetic operations
 

00:01:41.840 --> 00:01:43.830 align:start position:0%
arithmetic operations
so<00:01:42.079><c> in</c><00:01:42.240><c> our</c><00:01:42.399><c> first</c><00:01:42.720><c> expression</c><00:01:43.360><c> here</c><00:01:43.520><c> on</c><00:01:43.680><c> the</c>

00:01:43.830 --> 00:01:43.840 align:start position:0%
so in our first expression here on the
 

00:01:43.840 --> 00:01:47.830 align:start position:0%
so in our first expression here on the
left<00:01:44.159><c> side</c><00:01:44.560><c> we're</c><00:01:44.799><c> multiplying</c><00:01:45.680><c> 2</c><00:01:45.920><c> times</c><00:01:46.399><c> 3</c>

00:01:47.830 --> 00:01:47.840 align:start position:0%
left side we're multiplying 2 times 3
 

00:01:47.840 --> 00:01:50.149 align:start position:0%
left side we're multiplying 2 times 3
which<00:01:48.079><c> will</c><00:01:48.240><c> return</c><00:01:48.799><c> 6</c><00:01:49.360><c> and</c><00:01:49.439><c> then</c><00:01:49.600><c> dividing</c>

00:01:50.149 --> 00:01:50.159 align:start position:0%
which will return 6 and then dividing
 

00:01:50.159 --> 00:01:52.550 align:start position:0%
which will return 6 and then dividing
that<00:01:50.320><c> by</c><00:01:50.640><c> 2</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
that by 2
 

00:01:52.560 --> 00:01:55.429 align:start position:0%
that by 2
which<00:01:52.799><c> results</c><00:01:53.200><c> in</c><00:01:53.360><c> the</c><00:01:53.520><c> integer</c><00:01:54.000><c> three</c><00:01:55.280><c> on</c>

00:01:55.429 --> 00:01:55.439 align:start position:0%
which results in the integer three on
 

00:01:55.439 --> 00:01:56.389 align:start position:0%
which results in the integer three on
the<00:01:55.600><c> right</c><00:01:55.840><c> side</c>

00:01:56.389 --> 00:01:56.399 align:start position:0%
the right side
 

00:01:56.399 --> 00:01:59.109 align:start position:0%
the right side
we<00:01:56.640><c> add</c><00:01:57.040><c> four</c><00:01:57.360><c> and</c><00:01:57.600><c> four</c><00:01:57.840><c> to</c><00:01:58.000><c> get</c><00:01:58.240><c> eight</c>

00:01:59.109 --> 00:01:59.119 align:start position:0%
we add four and four to get eight
 

00:01:59.119 --> 00:01:59.990 align:start position:0%
we add four and four to get eight
subtract

00:01:59.990 --> 00:02:00.000 align:start position:0%
subtract
 

00:02:00.000 --> 00:02:03.030 align:start position:0%
subtract
two<00:02:00.560><c> to</c><00:02:00.719><c> get</c><00:02:00.960><c> six</c><00:02:01.360><c> and</c><00:02:01.439><c> subtract</c><00:02:02.079><c> three</c><00:02:02.799><c> which</c>

00:02:03.030 --> 00:02:03.040 align:start position:0%
two to get six and subtract three which
 

00:02:03.040 --> 00:02:04.630 align:start position:0%
two to get six and subtract three which
will<00:02:03.200><c> equal</c><00:02:03.600><c> three</c>

00:02:04.630 --> 00:02:04.640 align:start position:0%
will equal three
 

00:02:04.640 --> 00:02:06.950 align:start position:0%
will equal three
so<00:02:04.799><c> this</c><00:02:05.040><c> comparison</c><00:02:05.759><c> that</c><00:02:06.000><c> we</c><00:02:06.159><c> have</c><00:02:06.320><c> provided</c>

00:02:06.950 --> 00:02:06.960 align:start position:0%
so this comparison that we have provided
 

00:02:06.960 --> 00:02:08.949 align:start position:0%
so this comparison that we have provided
as<00:02:07.119><c> a</c><00:02:07.200><c> condition</c><00:02:07.759><c> to</c><00:02:07.920><c> our</c><00:02:08.160><c> if</c><00:02:08.319><c> statement</c>

00:02:08.949 --> 00:02:08.959 align:start position:0%
as a condition to our if statement
 

00:02:08.959 --> 00:02:12.150 align:start position:0%
as a condition to our if statement
is<00:02:09.280><c> 3</c><00:02:09.840><c> is</c><00:02:10.000><c> equal</c><00:02:10.239><c> to</c><00:02:10.479><c> 3</c><00:02:11.120><c> and</c><00:02:11.280><c> this</c><00:02:11.440><c> will</c><00:02:11.680><c> return</c>

00:02:12.150 --> 00:02:12.160 align:start position:0%
is 3 is equal to 3 and this will return
 

00:02:12.160 --> 00:02:13.670 align:start position:0%
is 3 is equal to 3 and this will return
true

00:02:13.670 --> 00:02:13.680 align:start position:0%
true
 

00:02:13.680 --> 00:02:15.750 align:start position:0%
true
so<00:02:13.920><c> we</c><00:02:14.080><c> expect</c><00:02:14.480><c> that</c><00:02:14.640><c> the</c><00:02:14.800><c> code</c><00:02:15.120><c> in</c><00:02:15.200><c> this</c><00:02:15.440><c> first</c>

00:02:15.750 --> 00:02:15.760 align:start position:0%
so we expect that the code in this first
 

00:02:15.760 --> 00:02:17.270 align:start position:0%
so we expect that the code in this first
branch<00:02:16.080><c> of</c><00:02:16.239><c> our</c><00:02:16.400><c> if</c><00:02:16.640><c> statement</c><00:02:16.959><c> will</c><00:02:17.120><c> be</c>

00:02:17.270 --> 00:02:17.280 align:start position:0%
branch of our if statement will be
 

00:02:17.280 --> 00:02:19.190 align:start position:0%
branch of our if statement will be
executed<00:02:18.000><c> on</c><00:02:18.160><c> line</c><00:02:18.480><c> 3.</c>

00:02:19.190 --> 00:02:19.200 align:start position:0%
executed on line 3.
 

00:02:19.200 --> 00:02:21.510 align:start position:0%
executed on line 3.
this<00:02:19.440><c> code</c><00:02:19.760><c> outputs</c><00:02:20.239><c> the</c><00:02:20.400><c> string</c><00:02:21.040><c> did</c><00:02:21.200><c> you</c><00:02:21.360><c> get</c>

00:02:21.510 --> 00:02:21.520 align:start position:0%
this code outputs the string did you get
 

00:02:21.520 --> 00:02:22.630 align:start position:0%
this code outputs the string did you get
it<00:02:21.680><c> right</c>

00:02:22.630 --> 00:02:22.640 align:start position:0%
it right
 

00:02:22.640 --> 00:02:31.990 align:start position:0%
it right
and<00:02:22.800><c> let's</c><00:02:23.040><c> run</c><00:02:23.280><c> our</c><00:02:23.440><c> code</c><00:02:23.680><c> to</c><00:02:23.840><c> see</c><00:02:24.000><c> this</c>

00:02:31.990 --> 00:02:32.000 align:start position:0%
 
 

00:02:32.000 --> 00:02:35.030 align:start position:0%
 
i'll<00:02:32.319><c> paste</c><00:02:32.720><c> in</c><00:02:32.959><c> our</c><00:02:33.200><c> third</c><00:02:33.519><c> snippet</c><00:02:33.920><c> of</c><00:02:34.080><c> code</c>

00:02:35.030 --> 00:02:35.040 align:start position:0%
i'll paste in our third snippet of code
 

00:02:35.040 --> 00:02:37.509 align:start position:0%
i'll paste in our third snippet of code
we<00:02:35.280><c> have</c><00:02:35.519><c> two</c><00:02:35.760><c> local</c><00:02:36.080><c> variables</c><00:02:36.720><c> initialized</c>

00:02:37.509 --> 00:02:37.519 align:start position:0%
we have two local variables initialized
 

00:02:37.519 --> 00:02:38.390 align:start position:0%
we have two local variables initialized
on<00:02:37.680><c> lines</c><00:02:38.080><c> 1</c>

00:02:38.390 --> 00:02:38.400 align:start position:0%
on lines 1
 

00:02:38.400 --> 00:02:41.589 align:start position:0%
on lines 1
and<00:02:38.640><c> 2</c><00:02:39.440><c> y</c><00:02:39.840><c> references</c><00:02:40.640><c> 9</c><00:02:41.200><c> and</c>

00:02:41.589 --> 00:02:41.599 align:start position:0%
and 2 y references 9 and
 

00:02:41.599 --> 00:02:44.390 align:start position:0%
and 2 y references 9 and
x<00:02:41.840><c> references</c><00:02:42.560><c> 10.</c><00:02:43.280><c> so</c><00:02:43.519><c> let's</c><00:02:43.760><c> check</c><00:02:44.000><c> out</c><00:02:44.160><c> our</c>

00:02:44.390 --> 00:02:44.400 align:start position:0%
x references 10. so let's check out our
 

00:02:44.400 --> 00:02:45.350 align:start position:0%
x references 10. so let's check out our
if<00:02:44.560><c> statement</c>

00:02:45.350 --> 00:02:45.360 align:start position:0%
if statement
 

00:02:45.360 --> 00:02:47.190 align:start position:0%
if statement
the<00:02:45.519><c> first</c><00:02:45.760><c> condition</c><00:02:46.239><c> we</c><00:02:46.480><c> provide</c><00:02:46.879><c> our</c><00:02:47.040><c> if</c>

00:02:47.190 --> 00:02:47.200 align:start position:0%
the first condition we provide our if
 

00:02:47.200 --> 00:02:48.710 align:start position:0%
the first condition we provide our if
statement<00:02:47.680><c> on</c><00:02:47.840><c> line</c><00:02:48.160><c> 3</c>

00:02:48.710 --> 00:02:48.720 align:start position:0%
statement on line 3
 

00:02:48.720 --> 00:02:51.509 align:start position:0%
statement on line 3
compares<00:02:49.360><c> whether</c><00:02:49.840><c> x</c><00:02:50.080><c> plus</c><00:02:50.400><c> 1</c><00:02:51.040><c> which</c><00:02:51.360><c> will</c>

00:02:51.509 --> 00:02:51.519 align:start position:0%
compares whether x plus 1 which will
 

00:02:51.519 --> 00:02:52.390 align:start position:0%
compares whether x plus 1 which will
evaluate<00:02:52.080><c> to</c>

00:02:52.390 --> 00:02:52.400 align:start position:0%
evaluate to
 

00:02:52.400 --> 00:02:55.190 align:start position:0%
evaluate to
11<00:02:53.120><c> is</c><00:02:53.360><c> less</c><00:02:53.599><c> than</c><00:02:53.760><c> or</c><00:02:53.920><c> equal</c><00:02:54.239><c> to</c><00:02:54.480><c> y</c><00:02:54.959><c> which</c>

00:02:55.190 --> 00:02:55.200 align:start position:0%
11 is less than or equal to y which
 

00:02:55.200 --> 00:02:55.910 align:start position:0%
11 is less than or equal to y which
references

00:02:55.910 --> 00:02:55.920 align:start position:0%
references
 

00:02:55.920 --> 00:02:59.350 align:start position:0%
references
9.<00:02:56.720><c> so</c><00:02:56.959><c> this</c><00:02:57.120><c> condition</c><00:02:57.599><c> evaluates</c><00:02:58.239><c> to</c><00:02:58.480><c> false</c>

00:02:59.350 --> 00:02:59.360 align:start position:0%
9. so this condition evaluates to false
 

00:02:59.360 --> 00:03:02.229 align:start position:0%
9. so this condition evaluates to false
ruby<00:02:59.760><c> will</c><00:02:59.920><c> move</c><00:03:00.159><c> on</c><00:03:00.319><c> to</c><00:03:00.480><c> line</c><00:03:00.800><c> 5.</c><00:03:02.000><c> this</c>

00:03:02.229 --> 00:03:02.239 align:start position:0%
ruby will move on to line 5. this
 

00:03:02.239 --> 00:03:04.229 align:start position:0%
ruby will move on to line 5. this
condition<00:03:02.800><c> evaluates</c><00:03:03.519><c> whether</c><00:03:03.920><c> x</c>

00:03:04.229 --> 00:03:04.239 align:start position:0%
condition evaluates whether x
 

00:03:04.239 --> 00:03:07.910 align:start position:0%
condition evaluates whether x
plus<00:03:04.560><c> 1</c><00:03:05.519><c> which</c><00:03:05.760><c> evaluates</c><00:03:06.400><c> to</c><00:03:06.720><c> 11</c>

00:03:07.910 --> 00:03:07.920 align:start position:0%
plus 1 which evaluates to 11
 

00:03:07.920 --> 00:03:10.550 align:start position:0%
plus 1 which evaluates to 11
is<00:03:08.159><c> greater</c><00:03:08.560><c> than</c><00:03:08.800><c> or</c><00:03:09.040><c> equal</c><00:03:09.440><c> to</c><00:03:09.760><c> y</c><00:03:10.319><c> which</c>

00:03:10.550 --> 00:03:10.560 align:start position:0%
is greater than or equal to y which
 

00:03:10.560 --> 00:03:11.830 align:start position:0%
is greater than or equal to y which
references<00:03:11.200><c> 9.</c>

00:03:11.830 --> 00:03:11.840 align:start position:0%
references 9.
 

00:03:11.840 --> 00:03:14.949 align:start position:0%
references 9.
since<00:03:12.239><c> 11</c><00:03:12.959><c> is</c><00:03:13.200><c> greater</c><00:03:13.519><c> than</c><00:03:13.760><c> 9</c><00:03:14.640><c> line</c>

00:03:14.949 --> 00:03:14.959 align:start position:0%
since 11 is greater than 9 line
 

00:03:14.959 --> 00:03:17.350 align:start position:0%
since 11 is greater than 9 line
6<00:03:15.280><c> of</c><00:03:15.440><c> our</c><00:03:15.519><c> code</c><00:03:15.760><c> will</c><00:03:15.920><c> be</c><00:03:16.080><c> executed</c><00:03:16.959><c> we'll</c><00:03:17.120><c> run</c>

00:03:17.350 --> 00:03:17.360 align:start position:0%
6 of our code will be executed we'll run
 

00:03:17.360 --> 00:03:33.760 align:start position:0%
6 of our code will be executed we'll run
our<00:03:17.440><c> code</c><00:03:17.760><c> one</c><00:03:17.920><c> more</c><00:03:18.080><c> time</c><00:03:18.319><c> to</c><00:03:18.480><c> see</c><00:03:30.760><c> that</c>

