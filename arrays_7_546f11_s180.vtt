WEBVTT
Kind: captions
Language: en

00:00:04.319 --> 00:00:06.710 align:start position:0%
 
we've<00:00:04.560><c> been</c><00:00:04.799><c> asked</c><00:00:05.040><c> to</c><00:00:05.279><c> write</c><00:00:05.520><c> a</c><00:00:05.680><c> program</c>

00:00:06.710 --> 00:00:06.720 align:start position:0%
we've been asked to write a program
 

00:00:06.720 --> 00:00:09.509 align:start position:0%
we've been asked to write a program
that<00:00:07.040><c> iterates</c><00:00:07.680><c> over</c><00:00:08.000><c> an</c><00:00:08.240><c> array</c><00:00:08.720><c> and</c><00:00:09.040><c> builds</c><00:00:09.360><c> a</c>

00:00:09.509 --> 00:00:09.519 align:start position:0%
that iterates over an array and builds a
 

00:00:09.519 --> 00:00:11.270 align:start position:0%
that iterates over an array and builds a
new<00:00:09.760><c> array</c><00:00:10.160><c> that</c><00:00:10.400><c> is</c><00:00:10.480><c> the</c><00:00:10.639><c> result</c>

00:00:11.270 --> 00:00:11.280 align:start position:0%
new array that is the result
 

00:00:11.280 --> 00:00:13.270 align:start position:0%
new array that is the result
of<00:00:11.440><c> incrementing</c><00:00:12.240><c> each</c><00:00:12.559><c> value</c><00:00:13.040><c> in</c><00:00:13.120><c> the</c>

00:00:13.270 --> 00:00:13.280 align:start position:0%
of incrementing each value in the
 

00:00:13.280 --> 00:00:14.470 align:start position:0%
of incrementing each value in the
original<00:00:13.840><c> array</c>

00:00:14.470 --> 00:00:14.480 align:start position:0%
original array
 

00:00:14.480 --> 00:00:17.510 align:start position:0%
original array
by<00:00:14.920><c> two</c><00:00:16.160><c> so</c><00:00:16.400><c> at</c><00:00:16.480><c> the</c><00:00:16.560><c> end</c><00:00:16.800><c> of</c><00:00:16.880><c> this</c><00:00:17.119><c> program</c>

00:00:17.510 --> 00:00:17.520 align:start position:0%
by two so at the end of this program
 

00:00:17.520 --> 00:00:19.269 align:start position:0%
by two so at the end of this program
we're<00:00:17.680><c> going</c><00:00:17.840><c> to</c><00:00:18.000><c> have</c><00:00:18.240><c> two</c><00:00:18.480><c> arrays</c><00:00:19.039><c> the</c>

00:00:19.269 --> 00:00:19.279 align:start position:0%
we're going to have two arrays the
 

00:00:19.279 --> 00:00:20.310 align:start position:0%
we're going to have two arrays the
original<00:00:19.840><c> array</c>

00:00:20.310 --> 00:00:20.320 align:start position:0%
original array
 

00:00:20.320 --> 00:00:22.710 align:start position:0%
original array
and<00:00:20.480><c> this</c><00:00:20.720><c> new</c><00:00:20.960><c> array</c><00:00:21.680><c> and</c><00:00:21.760><c> we</c><00:00:21.920><c> want</c><00:00:22.160><c> to</c><00:00:22.320><c> output</c>

00:00:22.710 --> 00:00:22.720 align:start position:0%
and this new array and we want to output
 

00:00:22.720 --> 00:00:25.830 align:start position:0%
and this new array and we want to output
both<00:00:23.039><c> of</c><00:00:23.119><c> them</c><00:00:23.359><c> using</c><00:00:23.760><c> p</c>

00:00:25.830 --> 00:00:25.840 align:start position:0%
both of them using p
 

00:00:25.840 --> 00:00:28.070 align:start position:0%
both of them using p
so<00:00:26.000><c> there's</c><00:00:26.240><c> a</c><00:00:26.320><c> few</c><00:00:26.560><c> steps</c><00:00:26.960><c> here</c><00:00:27.680><c> let's</c><00:00:27.840><c> just</c>

00:00:28.070 --> 00:00:28.080 align:start position:0%
so there's a few steps here let's just
 

00:00:28.080 --> 00:00:31.910 align:start position:0%
so there's a few steps here let's just
begin<00:00:28.480><c> by</c><00:00:28.800><c> creating</c><00:00:29.199><c> our</c><00:00:29.439><c> original</c><00:00:29.920><c> array</c>

00:00:31.910 --> 00:00:31.920 align:start position:0%
begin by creating our original array
 

00:00:31.920 --> 00:00:37.430 align:start position:0%
begin by creating our original array
and<00:00:32.079><c> we'll</c><00:00:32.239><c> make</c><00:00:32.480><c> this</c><00:00:32.719><c> an</c><00:00:32.880><c> array</c><00:00:33.200><c> of</c><00:00:33.440><c> integers</c>

00:00:37.430 --> 00:00:37.440 align:start position:0%
 
 

00:00:37.440 --> 00:00:40.150 align:start position:0%
 
and<00:00:37.680><c> i'll</c><00:00:37.920><c> initialize</c><00:00:38.559><c> an</c><00:00:38.879><c> empty</c><00:00:39.200><c> array</c><00:00:39.920><c> we'll</c>

00:00:40.150 --> 00:00:40.160 align:start position:0%
and i'll initialize an empty array we'll
 

00:00:40.160 --> 00:00:42.069 align:start position:0%
and i'll initialize an empty array we'll
call<00:00:40.399><c> this</c><00:00:40.640><c> new</c><00:00:40.960><c> r</c>

00:00:42.069 --> 00:00:42.079 align:start position:0%
call this new r
 

00:00:42.079 --> 00:00:44.549 align:start position:0%
call this new r
and<00:00:42.239><c> this</c><00:00:42.480><c> is</c><00:00:42.640><c> where</c><00:00:42.960><c> we'll</c><00:00:43.360><c> collect</c><00:00:44.079><c> our</c><00:00:44.320><c> new</c>

00:00:44.549 --> 00:00:44.559 align:start position:0%
and this is where we'll collect our new
 

00:00:44.559 --> 00:00:48.790 align:start position:0%
and this is where we'll collect our new
values

00:00:48.790 --> 00:00:48.800 align:start position:0%
 
 

00:00:48.800 --> 00:00:50.869 align:start position:0%
 
just<00:00:49.039><c> to</c><00:00:49.280><c> start</c><00:00:49.600><c> out</c><00:00:49.760><c> let's</c><00:00:50.079><c> output</c><00:00:50.480><c> both</c><00:00:50.719><c> of</c>

00:00:50.869 --> 00:00:50.879 align:start position:0%
just to start out let's output both of
 

00:00:50.879 --> 00:00:53.189 align:start position:0%
just to start out let's output both of
these<00:00:51.120><c> arrays</c>

00:00:53.189 --> 00:00:53.199 align:start position:0%
these arrays
 

00:00:53.199 --> 00:00:55.029 align:start position:0%
these arrays
and<00:00:53.520><c> run</c><00:00:53.760><c> our</c><00:00:53.920><c> code</c><00:00:54.239><c> to</c><00:00:54.399><c> make</c><00:00:54.559><c> sure</c><00:00:54.800><c> we're</c>

00:00:55.029 --> 00:00:55.039 align:start position:0%
and run our code to make sure we're
 

00:00:55.039 --> 00:00:59.670 align:start position:0%
and run our code to make sure we're
seeing<00:00:55.280><c> what</c><00:00:55.440><c> we</c><00:00:56.840><c> expect</c>

00:00:59.670 --> 00:00:59.680 align:start position:0%
seeing what we expect
 

00:00:59.680 --> 00:01:02.950 align:start position:0%
seeing what we expect
and<00:00:59.840><c> we</c><00:01:00.079><c> do</c><00:01:00.480><c> we</c><00:01:00.640><c> see</c><00:01:00.879><c> our</c><00:01:01.039><c> original</c><00:01:01.600><c> array</c><00:01:02.640><c> and</c>

00:01:02.950 --> 00:01:02.960 align:start position:0%
and we do we see our original array and
 

00:01:02.960 --> 00:01:07.510 align:start position:0%
and we do we see our original array and
our<00:01:03.120><c> new</c><00:01:03.359><c> array</c><00:01:03.680><c> which</c><00:01:03.920><c> is</c><00:01:04.000><c> currently</c><00:01:04.559><c> empty</c>

00:01:07.510 --> 00:01:07.520 align:start position:0%
 
 

00:01:07.520 --> 00:01:09.910 align:start position:0%
 
now<00:01:07.680><c> we</c><00:01:07.840><c> want</c><00:01:08.080><c> to</c><00:01:08.320><c> populate</c><00:01:08.960><c> our</c><00:01:09.119><c> new</c><00:01:09.360><c> array</c>

00:01:09.910 --> 00:01:09.920 align:start position:0%
now we want to populate our new array
 

00:01:09.920 --> 00:01:10.870 align:start position:0%
now we want to populate our new array
with<00:01:10.479><c> five</c>

00:01:10.870 --> 00:01:10.880 align:start position:0%
with five
 

00:01:10.880 --> 00:01:14.789 align:start position:0%
with five
elements<00:01:12.240><c> and</c><00:01:12.560><c> each</c><00:01:12.880><c> element</c><00:01:13.439><c> is</c><00:01:13.680><c> going</c><00:01:14.000><c> to</c><00:01:14.320><c> be</c>

00:01:14.789 --> 00:01:14.799 align:start position:0%
elements and each element is going to be
 

00:01:14.799 --> 00:01:17.030 align:start position:0%
elements and each element is going to be
an<00:01:15.040><c> element</c><00:01:15.439><c> from</c><00:01:15.600><c> the</c><00:01:15.840><c> original</c><00:01:16.320><c> array</c>

00:01:17.030 --> 00:01:17.040 align:start position:0%
an element from the original array
 

00:01:17.040 --> 00:01:19.910 align:start position:0%
an element from the original array
incremented<00:01:17.600><c> by</c><00:01:17.920><c> two</c>

00:01:19.910 --> 00:01:19.920 align:start position:0%
incremented by two
 

00:01:19.920 --> 00:01:23.510 align:start position:0%
incremented by two
to<00:01:20.159><c> do</c><00:01:20.320><c> this</c><00:01:22.000><c> we</c><00:01:22.159><c> can</c><00:01:22.400><c> iterate</c><00:01:22.960><c> through</c><00:01:23.280><c> the</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
to do this we can iterate through the
 

00:01:23.520 --> 00:01:26.149 align:start position:0%
to do this we can iterate through the
original<00:01:24.840><c> array</c>

00:01:26.149 --> 00:01:26.159 align:start position:0%
original array
 

00:01:26.159 --> 00:01:29.990 align:start position:0%
original array
we<00:01:26.320><c> can</c><00:01:26.560><c> use</c><00:01:26.720><c> the</c><00:01:26.960><c> each</c><00:01:27.200><c> method</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
 
 

00:01:30.000 --> 00:01:32.149 align:start position:0%
 
and<00:01:30.240><c> each</c><00:01:30.560><c> element</c><00:01:30.960><c> of</c><00:01:31.119><c> this</c><00:01:31.360><c> array</c><00:01:31.759><c> will</c><00:01:31.920><c> be</c>

00:01:32.149 --> 00:01:32.159 align:start position:0%
and each element of this array will be
 

00:01:32.159 --> 00:01:35.109 align:start position:0%
and each element of this array will be
passed<00:01:32.400><c> to</c><00:01:32.560><c> the</c><00:01:32.720><c> block</c><00:01:33.040><c> as</c><00:01:33.200><c> an</c><00:01:33.360><c> argument</c>

00:01:35.109 --> 00:01:35.119 align:start position:0%
passed to the block as an argument
 

00:01:35.119 --> 00:01:39.030 align:start position:0%
passed to the block as an argument
and<00:01:35.280><c> we'll</c><00:01:35.439><c> name</c><00:01:35.680><c> that</c><00:01:35.840><c> parameter</c><00:01:36.640><c> n</c>

00:01:39.030 --> 00:01:39.040 align:start position:0%
 
 

00:01:39.040 --> 00:01:43.670 align:start position:0%
 
now<00:01:39.280><c> let's</c><00:01:39.520><c> stop</c><00:01:39.920><c> here</c><00:01:40.240><c> and</c><00:01:40.479><c> run</c><00:01:40.720><c> our</c><00:01:40.880><c> code</c>

00:01:43.670 --> 00:01:43.680 align:start position:0%
 
 

00:01:43.680 --> 00:01:45.270 align:start position:0%
 
we're<00:01:43.840><c> not</c><00:01:44.000><c> going</c><00:01:44.159><c> to</c><00:01:44.320><c> put</c><00:01:44.560><c> anything</c><00:01:44.880><c> into</c><00:01:45.119><c> our</c>

00:01:45.270 --> 00:01:45.280 align:start position:0%
we're not going to put anything into our
 

00:01:45.280 --> 00:01:47.590 align:start position:0%
we're not going to put anything into our
new<00:01:45.439><c> array</c><00:01:45.840><c> yet</c><00:01:46.640><c> we're</c><00:01:46.799><c> simply</c><00:01:47.119><c> going</c><00:01:47.360><c> to</c>

00:01:47.590 --> 00:01:47.600 align:start position:0%
new array yet we're simply going to
 

00:01:47.600 --> 00:01:48.950 align:start position:0%
new array yet we're simply going to
output<00:01:48.079><c> the</c><00:01:48.320><c> result</c>

00:01:48.950 --> 00:01:48.960 align:start position:0%
output the result
 

00:01:48.960 --> 00:01:55.749 align:start position:0%
output the result
of<00:01:49.840><c> adding</c><00:01:50.320><c> 2</c><00:01:51.040><c> to</c><00:01:51.360><c> each</c><00:01:52.840><c> element</c>

00:01:55.749 --> 00:01:55.759 align:start position:0%
of adding 2 to each element
 

00:01:55.759 --> 00:01:59.190 align:start position:0%
of adding 2 to each element
we'll<00:01:55.920><c> run</c><00:01:56.159><c> our</c><00:01:56.399><c> code</c>

00:01:59.190 --> 00:01:59.200 align:start position:0%
 
 

00:01:59.200 --> 00:02:02.389 align:start position:0%
 
and<00:01:59.439><c> we</c><00:01:59.520><c> can</c><00:01:59.759><c> see</c><00:02:00.000><c> five</c><00:02:00.240><c> lines</c><00:02:00.560><c> of</c><00:02:00.719><c> output</c><00:02:01.840><c> 3</c>

00:02:02.389 --> 00:02:02.399 align:start position:0%
and we can see five lines of output 3
 

00:02:02.399 --> 00:02:06.389 align:start position:0%
and we can see five lines of output 3
4<00:02:02.880><c> 5</c><00:02:03.360><c> 6</c><00:02:03.680><c> and</c><00:02:04.000><c> 7</c><00:02:05.200><c> and</c><00:02:05.360><c> when</c><00:02:05.520><c> we</c><00:02:05.680><c> compare</c><00:02:06.159><c> these</c>

00:02:06.389 --> 00:02:06.399 align:start position:0%
4 5 6 and 7 and when we compare these
 

00:02:06.399 --> 00:02:06.870 align:start position:0%
4 5 6 and 7 and when we compare these
lines<00:02:06.640><c> of</c>

00:02:06.870 --> 00:02:06.880 align:start position:0%
lines of
 

00:02:06.880 --> 00:02:09.109 align:start position:0%
lines of
output<00:02:07.439><c> to</c><00:02:07.600><c> the</c><00:02:07.840><c> elements</c><00:02:08.319><c> in</c><00:02:08.399><c> the</c><00:02:08.640><c> original</c>

00:02:09.109 --> 00:02:09.119 align:start position:0%
output to the elements in the original
 

00:02:09.119 --> 00:02:10.469 align:start position:0%
output to the elements in the original
array<00:02:09.440><c> below</c>

00:02:10.469 --> 00:02:10.479 align:start position:0%
array below
 

00:02:10.479 --> 00:02:12.550 align:start position:0%
array below
we<00:02:10.720><c> see</c><00:02:10.879><c> that</c><00:02:11.200><c> these</c><00:02:11.520><c> are</c><00:02:11.760><c> the</c><00:02:12.080><c> original</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
we see that these are the original
 

00:02:12.560 --> 00:02:15.030 align:start position:0%
we see that these are the original
elements<00:02:13.200><c> incremented</c><00:02:13.760><c> by</c><00:02:14.080><c> two</c>

00:02:15.030 --> 00:02:15.040 align:start position:0%
elements incremented by two
 

00:02:15.040 --> 00:02:18.229 align:start position:0%
elements incremented by two
so<00:02:15.200><c> this</c><00:02:15.440><c> is</c><00:02:15.520><c> what</c><00:02:15.680><c> we</c><00:02:15.840><c> want</c>

00:02:18.229 --> 00:02:18.239 align:start position:0%
 
 

00:02:18.239 --> 00:02:20.830 align:start position:0%
 
now<00:02:18.400><c> we</c><00:02:18.560><c> need</c><00:02:18.720><c> to</c><00:02:19.040><c> add</c><00:02:19.280><c> these</c><00:02:19.520><c> to</c><00:02:19.680><c> our</c><00:02:19.840><c> new</c>

00:02:20.830 --> 00:02:20.840 align:start position:0%
now we need to add these to our new
 

00:02:20.840 --> 00:02:24.150 align:start position:0%
now we need to add these to our new
array

00:02:24.150 --> 00:02:24.160 align:start position:0%
 
 

00:02:24.160 --> 00:02:26.309 align:start position:0%
 
we<00:02:24.400><c> can</c><00:02:24.560><c> use</c><00:02:24.800><c> what</c><00:02:25.120><c> is</c><00:02:25.280><c> sometimes</c><00:02:25.840><c> called</c><00:02:26.080><c> the</c>

00:02:26.309 --> 00:02:26.319 align:start position:0%
we can use what is sometimes called the
 

00:02:26.319 --> 00:02:27.589 align:start position:0%
we can use what is sometimes called the
shovel<00:02:26.720><c> operator</c>

00:02:27.589 --> 00:02:27.599 align:start position:0%
shovel operator
 

00:02:27.599 --> 00:02:30.550 align:start position:0%
shovel operator
this<00:02:27.840><c> is</c><00:02:28.000><c> an</c><00:02:28.160><c> array</c><00:02:28.560><c> method</c><00:02:29.440><c> to</c><00:02:29.680><c> append</c><00:02:30.319><c> each</c>

00:02:30.550 --> 00:02:30.560 align:start position:0%
this is an array method to append each
 

00:02:30.560 --> 00:02:32.309 align:start position:0%
this is an array method to append each
of<00:02:30.640><c> these</c><00:02:30.959><c> incremented</c><00:02:31.599><c> values</c>

00:02:32.309 --> 00:02:32.319 align:start position:0%
of these incremented values
 

00:02:32.319 --> 00:02:35.430 align:start position:0%
of these incremented values
into<00:02:32.560><c> the</c><00:02:32.720><c> new</c><00:02:32.959><c> array</c>

00:02:35.430 --> 00:02:35.440 align:start position:0%
 
 

00:02:35.440 --> 00:02:37.830 align:start position:0%
 
now<00:02:35.840><c> after</c><00:02:36.239><c> iterating</c><00:02:36.720><c> through</c><00:02:37.120><c> our</c><00:02:37.280><c> original</c>

00:02:37.830 --> 00:02:37.840 align:start position:0%
now after iterating through our original
 

00:02:37.840 --> 00:02:39.110 align:start position:0%
now after iterating through our original
array

00:02:39.110 --> 00:02:39.120 align:start position:0%
array
 

00:02:39.120 --> 00:02:41.589 align:start position:0%
array
and<00:02:39.440><c> appending</c><00:02:40.080><c> its</c><00:02:40.480><c> elements</c><00:02:41.040><c> incremented</c>

00:02:41.589 --> 00:02:41.599 align:start position:0%
and appending its elements incremented
 

00:02:41.599 --> 00:02:42.309 align:start position:0%
and appending its elements incremented
by<00:02:41.840><c> two</c>

00:02:42.309 --> 00:02:42.319 align:start position:0%
by two
 

00:02:42.319 --> 00:02:44.869 align:start position:0%
by two
into<00:02:42.560><c> our</c><00:02:42.720><c> new</c><00:02:42.959><c> array</c><00:02:43.760><c> we</c><00:02:44.000><c> expect</c><00:02:44.319><c> to</c><00:02:44.480><c> see</c><00:02:44.720><c> the</c>

00:02:44.869 --> 00:02:44.879 align:start position:0%
into our new array we expect to see the
 

00:02:44.879 --> 00:02:49.190 align:start position:0%
into our new array we expect to see the
final<00:02:45.200><c> result</c><00:02:45.519><c> that</c><00:02:45.680><c> we</c><00:02:45.840><c> want</c>

00:02:49.190 --> 00:02:49.200 align:start position:0%
 
 

00:02:49.200 --> 00:03:02.400 align:start position:0%
 
and<00:02:49.519><c> writing</c><00:02:49.840><c> our</c><00:02:50.000><c> code</c><00:02:50.239><c> that's</c><00:02:50.480><c> what</c><00:02:50.640><c> we</c><00:02:59.400><c> see</c>

