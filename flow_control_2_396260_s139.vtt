WEBVTT
Kind: captions
Language: en

00:00:03.679 --> 00:00:04.630 align:start position:0%
 
we<00:00:03.840><c> need</c><00:00:04.080><c> to</c>

00:00:04.630 --> 00:00:04.640 align:start position:0%
we need to
 

00:00:04.640 --> 00:00:07.269 align:start position:0%
we need to
write<00:00:04.880><c> a</c><00:00:05.040><c> method</c><00:00:05.680><c> that</c><00:00:06.000><c> takes</c><00:00:06.240><c> a</c><00:00:06.399><c> string</c><00:00:06.960><c> as</c><00:00:07.120><c> an</c>

00:00:07.269 --> 00:00:07.279 align:start position:0%
write a method that takes a string as an
 

00:00:07.279 --> 00:00:08.710 align:start position:0%
write a method that takes a string as an
argument

00:00:08.710 --> 00:00:08.720 align:start position:0%
argument
 

00:00:08.720 --> 00:00:10.870 align:start position:0%
argument
if<00:00:08.880><c> the</c><00:00:09.040><c> string</c><00:00:09.519><c> argument</c><00:00:10.080><c> is</c><00:00:10.320><c> greater</c><00:00:10.639><c> than</c>

00:00:10.870 --> 00:00:10.880 align:start position:0%
if the string argument is greater than
 

00:00:10.880 --> 00:00:12.230 align:start position:0%
if the string argument is greater than
10<00:00:11.200><c> characters</c>

00:00:12.230 --> 00:00:12.240 align:start position:0%
10 characters
 

00:00:12.240 --> 00:00:15.110 align:start position:0%
10 characters
we<00:00:12.400><c> want</c><00:00:12.559><c> to</c><00:00:12.799><c> return</c><00:00:13.440><c> a</c><00:00:13.599><c> new</c><00:00:13.920><c> string</c><00:00:14.559><c> with</c><00:00:14.880><c> all</c>

00:00:15.110 --> 00:00:15.120 align:start position:0%
we want to return a new string with all
 

00:00:15.120 --> 00:00:16.870 align:start position:0%
we want to return a new string with all
the<00:00:15.280><c> characters</c><00:00:15.839><c> uppercase</c>

00:00:16.870 --> 00:00:16.880 align:start position:0%
the characters uppercase
 

00:00:16.880 --> 00:00:19.429 align:start position:0%
the characters uppercase
if<00:00:17.039><c> the</c><00:00:17.279><c> string</c><00:00:17.600><c> argument</c><00:00:18.160><c> has</c><00:00:18.480><c> 10</c><00:00:18.800><c> characters</c>

00:00:19.429 --> 00:00:19.439 align:start position:0%
if the string argument has 10 characters
 

00:00:19.439 --> 00:00:20.470 align:start position:0%
if the string argument has 10 characters
or<00:00:19.680><c> less</c>

00:00:20.470 --> 00:00:20.480 align:start position:0%
or less
 

00:00:20.480 --> 00:00:23.590 align:start position:0%
or less
we<00:00:20.640><c> want</c><00:00:20.800><c> to</c><00:00:20.960><c> return</c><00:00:21.359><c> the</c><00:00:21.600><c> original</c><00:00:22.080><c> string</c><00:00:23.439><c> so</c>

00:00:23.590 --> 00:00:23.600 align:start position:0%
we want to return the original string so
 

00:00:23.600 --> 00:00:24.790 align:start position:0%
we want to return the original string so
we'll<00:00:23.840><c> call</c><00:00:24.080><c> our</c><00:00:24.240><c> method</c>

00:00:24.790 --> 00:00:24.800 align:start position:0%
we'll call our method
 

00:00:24.800 --> 00:00:28.830 align:start position:0%
we'll call our method
caps<00:00:26.720><c> and</c><00:00:27.199><c> name</c><00:00:27.439><c> the</c><00:00:27.599><c> parameter</c>

00:00:28.830 --> 00:00:28.840 align:start position:0%
caps and name the parameter
 

00:00:28.840 --> 00:00:31.669 align:start position:0%
caps and name the parameter
string<00:00:29.920><c> and</c><00:00:30.080><c> we</c><00:00:30.240><c> can</c><00:00:30.480><c> use</c><00:00:30.800><c> a</c><00:00:31.039><c> simple</c>

00:00:31.669 --> 00:00:31.679 align:start position:0%
string and we can use a simple
 

00:00:31.679 --> 00:00:34.229 align:start position:0%
string and we can use a simple
if<00:00:32.000><c> else</c><00:00:32.320><c> conditional</c><00:00:32.880><c> statement</c><00:00:33.520><c> to</c><00:00:33.920><c> achieve</c>

00:00:34.229 --> 00:00:34.239 align:start position:0%
if else conditional statement to achieve
 

00:00:34.239 --> 00:00:36.549 align:start position:0%
if else conditional statement to achieve
this<00:00:34.480><c> functionality</c>

00:00:36.549 --> 00:00:36.559 align:start position:0%
this functionality
 

00:00:36.559 --> 00:00:38.950 align:start position:0%
this functionality
as<00:00:36.800><c> the</c><00:00:36.960><c> condition</c><00:00:37.600><c> for</c><00:00:37.840><c> our</c><00:00:38.079><c> if</c><00:00:38.239><c> statement</c>

00:00:38.950 --> 00:00:38.960 align:start position:0%
as the condition for our if statement
 

00:00:38.960 --> 00:00:42.229 align:start position:0%
as the condition for our if statement
we'll<00:00:39.280><c> examine</c><00:00:39.840><c> the</c><00:00:40.079><c> length</c><00:00:40.480><c> of</c><00:00:40.559><c> the</c><00:00:40.800><c> string</c>

00:00:42.229 --> 00:00:42.239 align:start position:0%
we'll examine the length of the string
 

00:00:42.239 --> 00:00:44.709 align:start position:0%
we'll examine the length of the string
we'll<00:00:42.480><c> use</c><00:00:42.719><c> the</c><00:00:42.960><c> string</c><00:00:43.440><c> length</c><00:00:43.840><c> method</c><00:00:44.559><c> to</c>

00:00:44.709 --> 00:00:44.719 align:start position:0%
we'll use the string length method to
 

00:00:44.719 --> 00:00:47.590 align:start position:0%
we'll use the string length method to
return<00:00:45.200><c> the</c><00:00:45.360><c> length</c><00:00:45.760><c> of</c><00:00:45.840><c> the</c><00:00:46.000><c> string</c>

00:00:47.590 --> 00:00:47.600 align:start position:0%
return the length of the string
 

00:00:47.600 --> 00:00:49.590 align:start position:0%
return the length of the string
and<00:00:47.760><c> we'll</c><00:00:48.000><c> compare</c><00:00:48.480><c> that</c><00:00:48.719><c> length</c><00:00:49.280><c> to</c><00:00:49.440><c> the</c>

00:00:49.590 --> 00:00:49.600 align:start position:0%
and we'll compare that length to the
 

00:00:49.600 --> 00:00:51.830 align:start position:0%
and we'll compare that length to the
integer<00:00:50.160><c> 10.</c>

00:00:51.830 --> 00:00:51.840 align:start position:0%
integer 10.
 

00:00:51.840 --> 00:00:54.310 align:start position:0%
integer 10.
this<00:00:52.079><c> comparison</c><00:00:52.800><c> will</c><00:00:52.960><c> return</c><00:00:53.520><c> either</c><00:00:53.920><c> true</c>

00:00:54.310 --> 00:00:54.320 align:start position:0%
this comparison will return either true
 

00:00:54.320 --> 00:00:55.590 align:start position:0%
this comparison will return either true
or<00:00:54.559><c> false</c>

00:00:55.590 --> 00:00:55.600 align:start position:0%
or false
 

00:00:55.600 --> 00:00:58.150 align:start position:0%
or false
if<00:00:55.760><c> the</c><00:00:55.920><c> comparison</c><00:00:56.559><c> returns</c><00:00:57.199><c> true</c><00:00:57.760><c> and</c><00:00:57.920><c> the</c>

00:00:58.150 --> 00:00:58.160 align:start position:0%
if the comparison returns true and the
 

00:00:58.160 --> 00:01:01.270 align:start position:0%
if the comparison returns true and the
string's<00:00:58.719><c> length</c><00:00:59.120><c> is</c><00:00:59.280><c> greater</c><00:00:59.680><c> than</c><00:00:59.920><c> 10</c>

00:01:01.270 --> 00:01:01.280 align:start position:0%
string's length is greater than 10
 

00:01:01.280 --> 00:01:03.910 align:start position:0%
string's length is greater than 10
we<00:01:01.440><c> want</c><00:01:01.680><c> to</c><00:01:01.920><c> return</c><00:01:02.480><c> an</c><00:01:02.879><c> uppercase</c><00:01:03.520><c> version</c>

00:01:03.910 --> 00:01:03.920 align:start position:0%
we want to return an uppercase version
 

00:01:03.920 --> 00:01:05.670 align:start position:0%
we want to return an uppercase version
of<00:01:04.000><c> that</c><00:01:04.239><c> string</c>

00:01:05.670 --> 00:01:05.680 align:start position:0%
of that string
 

00:01:05.680 --> 00:01:08.310 align:start position:0%
of that string
and<00:01:05.840><c> we</c><00:01:06.000><c> can</c><00:01:06.240><c> do</c><00:01:06.479><c> that</c><00:01:06.720><c> by</c><00:01:07.040><c> using</c><00:01:07.439><c> the</c><00:01:07.760><c> string</c>

00:01:08.310 --> 00:01:08.320 align:start position:0%
and we can do that by using the string
 

00:01:08.320 --> 00:01:10.070 align:start position:0%
and we can do that by using the string
up<00:01:08.560><c> case</c><00:01:08.880><c> method</c>

00:01:10.070 --> 00:01:10.080 align:start position:0%
up case method
 

00:01:10.080 --> 00:01:12.469 align:start position:0%
up case method
if<00:01:10.240><c> ruby</c><00:01:10.640><c> does</c><00:01:10.880><c> not</c><00:01:11.200><c> execute</c><00:01:11.840><c> this</c><00:01:12.159><c> first</c>

00:01:12.469 --> 00:01:12.479 align:start position:0%
if ruby does not execute this first
 

00:01:12.479 --> 00:01:14.310 align:start position:0%
if ruby does not execute this first
branch<00:01:12.799><c> of</c><00:01:12.960><c> our</c><00:01:13.200><c> if</c><00:01:13.360><c> statement</c>

00:01:14.310 --> 00:01:14.320 align:start position:0%
branch of our if statement
 

00:01:14.320 --> 00:01:16.550 align:start position:0%
branch of our if statement
then<00:01:14.560><c> we</c><00:01:14.720><c> know</c><00:01:15.040><c> our</c><00:01:15.200><c> conditional</c><00:01:15.840><c> return</c>

00:01:16.550 --> 00:01:16.560 align:start position:0%
then we know our conditional return
 

00:01:16.560 --> 00:01:17.510 align:start position:0%
then we know our conditional return
false

00:01:17.510 --> 00:01:17.520 align:start position:0%
false
 

00:01:17.520 --> 00:01:19.990 align:start position:0%
false
and<00:01:17.920><c> our</c><00:01:18.159><c> string</c><00:01:18.720><c> is</c><00:01:18.960><c> less</c><00:01:19.200><c> than</c><00:01:19.360><c> or</c><00:01:19.600><c> equal</c><00:01:19.840><c> to</c>

00:01:19.990 --> 00:01:20.000 align:start position:0%
and our string is less than or equal to
 

00:01:20.000 --> 00:01:23.590 align:start position:0%
and our string is less than or equal to
10<00:01:20.320><c> characters</c>

00:01:23.590 --> 00:01:23.600 align:start position:0%
 
 

00:01:23.600 --> 00:01:29.670 align:start position:0%
 
so<00:01:23.759><c> we'll</c><00:01:24.000><c> just</c><00:01:24.240><c> return</c><00:01:24.640><c> the</c><00:01:24.799><c> original</c><00:01:25.280><c> string</c>

00:01:29.670 --> 00:01:29.680 align:start position:0%
 
 

00:01:29.680 --> 00:01:32.630 align:start position:0%
 
let's<00:01:30.000><c> invoke</c><00:01:30.479><c> our</c><00:01:30.640><c> caps</c><00:01:31.040><c> method</c><00:01:31.920><c> and</c><00:01:32.400><c> we'll</c>

00:01:32.630 --> 00:01:32.640 align:start position:0%
let's invoke our caps method and we'll
 

00:01:32.640 --> 00:01:32.950 align:start position:0%
let's invoke our caps method and we'll
pass

00:01:32.950 --> 00:01:32.960 align:start position:0%
pass
 

00:01:32.960 --> 00:01:38.830 align:start position:0%
pass
it<00:01:33.119><c> one</c><00:01:33.439><c> string</c><00:01:34.000><c> argument</c><00:01:34.560><c> with</c><00:01:34.960><c> less</c><00:01:35.280><c> than</c><00:01:35.520><c> 10</c>

00:01:38.830 --> 00:01:38.840 align:start position:0%
 
 

00:01:38.840 --> 00:01:40.230 align:start position:0%
 
characters

00:01:40.230 --> 00:01:40.240 align:start position:0%
characters
 

00:01:40.240 --> 00:01:43.749 align:start position:0%
characters
and<00:01:40.640><c> another</c><00:01:41.280><c> with</c><00:01:41.680><c> more</c><00:01:41.920><c> than</c><00:01:42.159><c> 10</c><00:01:42.399><c> characters</c>

00:01:43.749 --> 00:01:43.759 align:start position:0%
and another with more than 10 characters
 

00:01:43.759 --> 00:01:46.469 align:start position:0%
and another with more than 10 characters
and<00:01:44.000><c> i'm</c><00:01:44.159><c> going</c><00:01:44.399><c> to</c><00:01:44.560><c> output</c><00:01:45.040><c> the</c><00:01:45.200><c> return</c><00:01:45.759><c> value</c>

00:01:46.469 --> 00:01:46.479 align:start position:0%
and i'm going to output the return value
 

00:01:46.479 --> 00:01:51.429 align:start position:0%
and i'm going to output the return value
of<00:01:46.799><c> each</c><00:01:47.040><c> of</c><00:01:47.119><c> these</c><00:01:47.360><c> method</c><00:01:47.759><c> invocations</c>

00:01:51.429 --> 00:01:51.439 align:start position:0%
 
 

00:01:51.439 --> 00:01:53.190 align:start position:0%
 
we<00:01:51.680><c> expect</c><00:01:52.079><c> that</c><00:01:52.320><c> the</c><00:01:52.560><c> first</c><00:01:52.799><c> method</c>

00:01:53.190 --> 00:01:53.200 align:start position:0%
we expect that the first method
 

00:01:53.200 --> 00:01:55.350 align:start position:0%
we expect that the first method
invocation<00:01:53.840><c> will</c><00:01:54.079><c> return</c><00:01:54.560><c> the</c><00:01:54.799><c> original</c>

00:01:55.350 --> 00:01:55.360 align:start position:0%
invocation will return the original
 

00:01:55.360 --> 00:01:56.230 align:start position:0%
invocation will return the original
string

00:01:56.230 --> 00:01:56.240 align:start position:0%
string
 

00:01:56.240 --> 00:01:58.389 align:start position:0%
string
and<00:01:56.560><c> the</c><00:01:56.719><c> second</c><00:01:57.040><c> method</c><00:01:57.360><c> invocation</c><00:01:58.159><c> will</c>

00:01:58.389 --> 00:01:58.399 align:start position:0%
and the second method invocation will
 

00:01:58.399 --> 00:02:00.550 align:start position:0%
and the second method invocation will
return<00:01:58.799><c> the</c><00:01:59.040><c> name</c><00:01:59.360><c> with</c><00:01:59.680><c> all</c><00:01:59.920><c> uppercase</c>

00:02:00.550 --> 00:02:00.560 align:start position:0%
return the name with all uppercase
 

00:02:00.560 --> 00:02:02.630 align:start position:0%
return the name with all uppercase
letters

00:02:02.630 --> 00:02:02.640 align:start position:0%
letters
 

00:02:02.640 --> 00:02:07.510 align:start position:0%
letters
so<00:02:02.799><c> we'll</c><00:02:03.040><c> run</c><00:02:03.280><c> our</c><00:02:03.439><c> file</c>

00:02:07.510 --> 00:02:07.520 align:start position:0%
 
 

00:02:07.520 --> 00:02:21.599 align:start position:0%
 
and<00:02:07.680><c> we</c><00:02:07.920><c> see</c><00:02:08.080><c> the</c><00:02:08.239><c> result</c><00:02:08.640><c> we</c><00:02:18.599><c> expected</c>

