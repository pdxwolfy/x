WEBVTT
Kind: captions
Language: en

00:00:04.000 --> 00:00:05.829 align:start position:0%
 
we<00:00:04.160><c> need</c><00:00:04.319><c> to</c><00:00:04.480><c> determine</c><00:00:05.040><c> what</c><00:00:05.200><c> this</c><00:00:05.440><c> program</c>

00:00:05.829 --> 00:00:05.839 align:start position:0%
we need to determine what this program
 

00:00:05.839 --> 00:00:07.430 align:start position:0%
we need to determine what this program
will<00:00:06.080><c> output</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
will output
 

00:00:07.440 --> 00:00:09.270 align:start position:0%
will output
and<00:00:07.680><c> you</c><00:00:07.759><c> can</c><00:00:07.919><c> see</c><00:00:08.080><c> that</c><00:00:08.320><c> we're</c><00:00:08.559><c> comparing</c><00:00:09.040><c> the</c>

00:00:09.270 --> 00:00:09.280 align:start position:0%
and you can see that we're comparing the
 

00:00:09.280 --> 00:00:11.110 align:start position:0%
and you can see that we're comparing the
equality<00:00:10.080><c> of</c><00:00:10.320><c> hash</c><00:00:10.719><c> one</c>

00:00:11.110 --> 00:00:11.120 align:start position:0%
equality of hash one
 

00:00:11.120 --> 00:00:14.470 align:start position:0%
equality of hash one
and<00:00:11.280><c> hash</c><00:00:11.679><c> two</c><00:00:12.799><c> if</c><00:00:13.040><c> they</c><00:00:13.440><c> are</c><00:00:13.679><c> equal</c><00:00:14.160><c> we'll</c>

00:00:14.470 --> 00:00:14.480 align:start position:0%
and hash two if they are equal we'll
 

00:00:14.480 --> 00:00:15.110 align:start position:0%
and hash two if they are equal we'll
output

00:00:15.110 --> 00:00:15.120 align:start position:0%
output
 

00:00:15.120 --> 00:00:17.750 align:start position:0%
output
these<00:00:15.360><c> hashes</c><00:00:15.759><c> are</c><00:00:15.920><c> the</c><00:00:16.160><c> same</c><00:00:17.279><c> otherwise</c>

00:00:17.750 --> 00:00:17.760 align:start position:0%
these hashes are the same otherwise
 

00:00:17.760 --> 00:00:19.670 align:start position:0%
these hashes are the same otherwise
we're<00:00:17.920><c> going</c><00:00:18.080><c> to</c><00:00:18.320><c> output</c><00:00:18.720><c> these</c><00:00:19.039><c> hashes</c><00:00:19.520><c> are</c>

00:00:19.670 --> 00:00:19.680 align:start position:0%
we're going to output these hashes are
 

00:00:19.680 --> 00:00:22.310 align:start position:0%
we're going to output these hashes are
not<00:00:19.920><c> the</c><00:00:20.080><c> same</c>

00:00:22.310 --> 00:00:22.320 align:start position:0%
not the same
 

00:00:22.320 --> 00:00:24.630 align:start position:0%
not the same
so<00:00:22.560><c> taking</c><00:00:22.880><c> a</c><00:00:22.960><c> closer</c><00:00:23.439><c> look</c><00:00:23.680><c> at</c><00:00:23.840><c> hash</c><00:00:24.160><c> one</c><00:00:24.480><c> and</c>

00:00:24.630 --> 00:00:24.640 align:start position:0%
so taking a closer look at hash one and
 

00:00:24.640 --> 00:00:25.429 align:start position:0%
so taking a closer look at hash one and
hash<00:00:25.039><c> two</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
hash two
 

00:00:25.439 --> 00:00:27.670 align:start position:0%
hash two
on<00:00:25.599><c> lines</c><00:00:25.920><c> one</c><00:00:26.160><c> and</c><00:00:26.320><c> two</c><00:00:26.720><c> you</c><00:00:26.880><c> can</c><00:00:27.039><c> see</c><00:00:27.279><c> that</c>

00:00:27.670 --> 00:00:27.680 align:start position:0%
on lines one and two you can see that
 

00:00:27.680 --> 00:00:30.070 align:start position:0%
on lines one and two you can see that
although<00:00:28.160><c> our</c><00:00:28.400><c> key</c><00:00:28.720><c> value</c><00:00:29.199><c> pairs</c><00:00:29.679><c> are</c>

00:00:30.070 --> 00:00:30.080 align:start position:0%
although our key value pairs are
 

00:00:30.080 --> 00:00:33.590 align:start position:0%
although our key value pairs are
in<00:00:30.240><c> different</c><00:00:30.720><c> orders</c><00:00:31.920><c> we</c><00:00:32.160><c> do</c><00:00:32.559><c> have</c><00:00:32.960><c> the</c><00:00:33.200><c> same</c>

00:00:33.590 --> 00:00:33.600 align:start position:0%
in different orders we do have the same
 

00:00:33.600 --> 00:00:35.750 align:start position:0%
in different orders we do have the same
key<00:00:33.840><c> value</c><00:00:34.239><c> pairs</c><00:00:34.719><c> in</c><00:00:34.880><c> each</c><00:00:35.120><c> hash</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
key value pairs in each hash
 

00:00:35.760 --> 00:00:37.750 align:start position:0%
key value pairs in each hash
now<00:00:36.000><c> they</c><00:00:36.239><c> do</c><00:00:36.480><c> use</c><00:00:36.719><c> a</c><00:00:36.960><c> slightly</c><00:00:37.360><c> different</c>

00:00:37.750 --> 00:00:37.760 align:start position:0%
now they do use a slightly different
 

00:00:37.760 --> 00:00:39.270 align:start position:0%
now they do use a slightly different
syntax<00:00:38.399><c> in</c><00:00:38.640><c> places</c>

00:00:39.270 --> 00:00:39.280 align:start position:0%
syntax in places
 

00:00:39.280 --> 00:00:43.350 align:start position:0%
syntax in places
to<00:00:39.600><c> associate</c><00:00:40.320><c> a</c><00:00:40.480><c> key</c><00:00:40.800><c> with</c><00:00:41.040><c> a</c><00:00:41.200><c> value</c>

00:00:43.350 --> 00:00:43.360 align:start position:0%
to associate a key with a value
 

00:00:43.360 --> 00:00:46.950 align:start position:0%
to associate a key with a value
for<00:00:43.600><c> example</c><00:00:44.320><c> in</c><00:00:44.480><c> hash</c><00:00:44.960><c> one</c><00:00:45.920><c> we</c><00:00:46.079><c> have</c><00:00:46.320><c> the</c><00:00:46.559><c> key</c>

00:00:46.950 --> 00:00:46.960 align:start position:0%
for example in hash one we have the key
 

00:00:46.960 --> 00:00:49.190 align:start position:0%
for example in hash one we have the key
shoes<00:00:47.360><c> which</c><00:00:47.600><c> is</c><00:00:47.760><c> a</c><00:00:47.920><c> symbol</c><00:00:48.399><c> associated</c><00:00:49.039><c> with</c>

00:00:49.190 --> 00:00:49.200 align:start position:0%
shoes which is a symbol associated with
 

00:00:49.200 --> 00:00:50.069 align:start position:0%
shoes which is a symbol associated with
the<00:00:49.360><c> string</c>

00:00:50.069 --> 00:00:50.079 align:start position:0%
the string
 

00:00:50.079 --> 00:00:53.350 align:start position:0%
the string
nike<00:00:51.280><c> and</c><00:00:51.760><c> this</c><00:00:52.000><c> key</c><00:00:52.160><c> value</c><00:00:52.480><c> pair</c><00:00:52.800><c> is</c><00:00:52.960><c> written</c>

00:00:53.350 --> 00:00:53.360 align:start position:0%
nike and this key value pair is written
 

00:00:53.360 --> 00:00:55.110 align:start position:0%
nike and this key value pair is written
in<00:00:53.440><c> this</c><00:00:53.760><c> new</c><00:00:54.079><c> syntax</c>

00:00:55.110 --> 00:00:55.120 align:start position:0%
in this new syntax
 

00:00:55.120 --> 00:00:58.709 align:start position:0%
in this new syntax
in<00:00:55.280><c> hash</c><00:00:55.840><c> two</c><00:00:56.399><c> on</c><00:00:56.640><c> line</c><00:00:56.960><c> 2</c><00:00:57.680><c> we</c><00:00:57.920><c> also</c><00:00:58.239><c> have</c>

00:00:58.709 --> 00:00:58.719 align:start position:0%
in hash two on line 2 we also have
 

00:00:58.719 --> 00:01:01.430 align:start position:0%
in hash two on line 2 we also have
the<00:00:58.960><c> symbol</c><00:00:59.440><c> shoes</c><00:01:00.079><c> as</c><00:01:00.320><c> a</c><00:01:00.399><c> key</c><00:01:00.719><c> associated</c>

00:01:01.430 --> 00:01:01.440 align:start position:0%
the symbol shoes as a key associated
 

00:01:01.440 --> 00:01:02.470 align:start position:0%
the symbol shoes as a key associated
with<00:01:01.760><c> the</c><00:01:01.920><c> string</c>

00:01:02.470 --> 00:01:02.480 align:start position:0%
with the string
 

00:01:02.480 --> 00:01:06.149 align:start position:0%
with the string
nike<00:01:03.039><c> as</c><00:01:03.199><c> the</c><00:01:03.359><c> value</c><00:01:04.320><c> however</c><00:01:05.360><c> this</c><00:01:05.600><c> key</c><00:01:05.760><c> value</c>

00:01:06.149 --> 00:01:06.159 align:start position:0%
nike as the value however this key value
 

00:01:06.159 --> 00:01:08.390 align:start position:0%
nike as the value however this key value
pair<00:01:06.400><c> uses</c><00:01:06.720><c> the</c><00:01:06.880><c> older</c><00:01:07.280><c> syntax</c><00:01:07.840><c> with</c><00:01:08.000><c> a</c><00:01:08.080><c> hash</c>

00:01:08.390 --> 00:01:08.400 align:start position:0%
pair uses the older syntax with a hash
 

00:01:08.400 --> 00:01:10.630 align:start position:0%
pair uses the older syntax with a hash
rocket

00:01:10.630 --> 00:01:10.640 align:start position:0%
rocket
 

00:01:10.640 --> 00:01:12.550 align:start position:0%
rocket
so<00:01:10.799><c> the</c><00:01:10.960><c> question</c><00:01:11.360><c> is</c><00:01:11.520><c> whether</c><00:01:11.920><c> or</c><00:01:12.000><c> not</c><00:01:12.240><c> these</c>

00:01:12.550 --> 00:01:12.560 align:start position:0%
so the question is whether or not these
 

00:01:12.560 --> 00:01:14.550 align:start position:0%
so the question is whether or not these
two<00:01:12.880><c> hashes</c><00:01:13.520><c> are</c><00:01:13.760><c> going</c><00:01:14.080><c> to</c>

00:01:14.550 --> 00:01:14.560 align:start position:0%
two hashes are going to
 

00:01:14.560 --> 00:01:19.749 align:start position:0%
two hashes are going to
be<00:01:14.799><c> equal</c><00:01:15.520><c> let's</c><00:01:15.759><c> run</c><00:01:15.920><c> our</c><00:01:16.159><c> code</c>

00:01:19.749 --> 00:01:19.759 align:start position:0%
 
 

00:01:19.759 --> 00:01:22.630 align:start position:0%
 
and<00:01:19.920><c> they</c><00:01:20.159><c> are</c><00:01:20.720><c> in</c><00:01:20.960><c> ruby</c><00:01:21.520><c> we</c><00:01:21.680><c> aren't</c><00:01:21.920><c> relying</c>

00:01:22.630 --> 00:01:22.640 align:start position:0%
and they are in ruby we aren't relying
 

00:01:22.640 --> 00:01:24.789 align:start position:0%
and they are in ruby we aren't relying
on<00:01:22.960><c> the</c><00:01:23.200><c> order</c><00:01:23.600><c> of</c><00:01:23.759><c> hashes</c>

00:01:24.789 --> 00:01:24.799 align:start position:0%
on the order of hashes
 

00:01:24.799 --> 00:01:27.429 align:start position:0%
on the order of hashes
because<00:01:25.119><c> we</c><00:01:25.360><c> retrieve</c><00:01:26.000><c> values</c><00:01:26.560><c> based</c><00:01:26.960><c> on</c><00:01:27.200><c> the</c>

00:01:27.429 --> 00:01:27.439 align:start position:0%
because we retrieve values based on the
 

00:01:27.439 --> 00:01:28.870 align:start position:0%
because we retrieve values based on the
key

00:01:28.870 --> 00:01:28.880 align:start position:0%
key
 

00:01:28.880 --> 00:01:32.149 align:start position:0%
key
now<00:01:29.119><c> with</c><00:01:29.360><c> arrays</c><00:01:30.159><c> let's</c><00:01:30.400><c> hop</c><00:01:30.640><c> into</c><00:01:30.880><c> irb</c>

00:01:32.149 --> 00:01:32.159 align:start position:0%
now with arrays let's hop into irb
 

00:01:32.159 --> 00:01:35.109 align:start position:0%
now with arrays let's hop into irb
we<00:01:32.479><c> are</c><00:01:32.640><c> relying</c><00:01:33.280><c> on</c><00:01:33.439><c> the</c><00:01:33.759><c> order</c><00:01:34.240><c> or</c><00:01:34.560><c> index</c><00:01:34.960><c> of</c>

00:01:35.109 --> 00:01:35.119 align:start position:0%
we are relying on the order or index of
 

00:01:35.119 --> 00:01:37.190 align:start position:0%
we are relying on the order or index of
each<00:01:35.360><c> element</c>

00:01:37.190 --> 00:01:37.200 align:start position:0%
each element
 

00:01:37.200 --> 00:01:40.950 align:start position:0%
each element
so<00:01:37.439><c> i'm</c><00:01:37.600><c> going</c><00:01:38.840><c> to</c><00:01:39.759><c> create</c><00:01:40.079><c> a</c><00:01:40.240><c> three</c><00:01:40.560><c> element</c>

00:01:40.950 --> 00:01:40.960 align:start position:0%
so i'm going to create a three element
 

00:01:40.960 --> 00:01:42.789 align:start position:0%
so i'm going to create a three element
array

00:01:42.789 --> 00:01:42.799 align:start position:0%
array
 

00:01:42.799 --> 00:01:46.310 align:start position:0%
array
with<00:01:43.040><c> elements</c><00:01:43.600><c> one</c><00:01:44.000><c> two</c><00:01:44.240><c> and</c><00:01:44.479><c> three</c>

00:01:46.310 --> 00:01:46.320 align:start position:0%
with elements one two and three
 

00:01:46.320 --> 00:01:48.870 align:start position:0%
with elements one two and three
and<00:01:46.560><c> another</c><00:01:47.119><c> array</c><00:01:47.680><c> with</c><00:01:47.840><c> the</c><00:01:48.159><c> same</c><00:01:48.399><c> elements</c>

00:01:48.870 --> 00:01:48.880 align:start position:0%
and another array with the same elements
 

00:01:48.880 --> 00:01:50.310 align:start position:0%
and another array with the same elements
in<00:01:49.040><c> a</c><00:01:49.119><c> different</c><00:01:49.439><c> order</c>

00:01:50.310 --> 00:01:50.320 align:start position:0%
in a different order
 

00:01:50.320 --> 00:01:52.069 align:start position:0%
in a different order
and<00:01:50.399><c> when</c><00:01:50.560><c> we</c><00:01:50.720><c> compare</c><00:01:51.119><c> their</c><00:01:51.360><c> equality</c><00:01:52.000><c> you</c>

00:01:52.069 --> 00:01:52.079 align:start position:0%
and when we compare their equality you
 

00:01:52.079 --> 00:01:55.030 align:start position:0%
and when we compare their equality you
can<00:01:52.320><c> see</c><00:01:52.479><c> that</c><00:01:52.640><c> it</c><00:01:52.720><c> returns</c><00:01:53.360><c> false</c>

00:01:55.030 --> 00:01:55.040 align:start position:0%
can see that it returns false
 

00:01:55.040 --> 00:01:59.030 align:start position:0%
can see that it returns false
with<00:01:55.360><c> arrays</c><00:01:56.079><c> order</c><00:01:56.479><c> always</c><00:01:56.880><c> matters</c>

00:01:59.030 --> 00:01:59.040 align:start position:0%
with arrays order always matters
 

00:01:59.040 --> 00:02:01.109 align:start position:0%
with arrays order always matters
however<00:01:59.520><c> as</c><00:01:59.759><c> you</c><00:01:59.920><c> can</c><00:02:00.079><c> see</c><00:02:00.399><c> in</c><00:02:00.560><c> the</c><00:02:00.719><c> program</c>

00:02:01.109 --> 00:02:01.119 align:start position:0%
however as you can see in the program
 

00:02:01.119 --> 00:02:03.670 align:start position:0%
however as you can see in the program
that<00:02:01.280><c> we</c><00:02:01.439><c> just</c><00:02:01.680><c> ran</c>

00:02:03.670 --> 00:02:03.680 align:start position:0%
that we just ran
 

00:02:03.680 --> 00:02:06.550 align:start position:0%
that we just ran
these<00:02:03.920><c> two</c><00:02:04.159><c> hashes</c><00:02:04.880><c> are</c><00:02:05.200><c> equal</c><00:02:05.920><c> despite</c><00:02:06.399><c> the</c>

00:02:06.550 --> 00:02:06.560 align:start position:0%
these two hashes are equal despite the
 

00:02:06.560 --> 00:02:08.309 align:start position:0%
these two hashes are equal despite the
fact<00:02:06.880><c> that</c><00:02:07.040><c> we've</c><00:02:07.280><c> written</c><00:02:07.520><c> their</c><00:02:07.759><c> key</c><00:02:07.920><c> value</c>

00:02:08.309 --> 00:02:08.319 align:start position:0%
fact that we've written their key value
 

00:02:08.319 --> 00:02:17.760 align:start position:0%
fact that we've written their key value
pairs<00:02:08.800><c> in</c><00:02:08.879><c> a</c><00:02:08.959><c> different</c><00:02:14.760><c> order</c>

