WEBVTT
Kind: captions
Language: en

00:00:04.000 --> 00:00:04.950 align:start position:0%
 
this<00:00:04.240><c> exercise</c>

00:00:04.950 --> 00:00:04.960 align:start position:0%
this exercise
 

00:00:04.960 --> 00:00:07.749 align:start position:0%
this exercise
asks<00:00:05.279><c> us</c><00:00:05.440><c> to</c><00:00:05.759><c> get</c><00:00:05.920><c> rid</c><00:00:06.160><c> of</c><00:00:06.399><c> 11</c><00:00:07.120><c> which</c><00:00:07.359><c> is</c><00:00:07.520><c> the</c>

00:00:07.749 --> 00:00:07.759 align:start position:0%
asks us to get rid of 11 which is the
 

00:00:07.759 --> 00:00:09.750 align:start position:0%
asks us to get rid of 11 which is the
last<00:00:08.080><c> element</c><00:00:08.559><c> in</c><00:00:08.720><c> our</c><00:00:08.880><c> array</c>

00:00:09.750 --> 00:00:09.760 align:start position:0%
last element in our array
 

00:00:09.760 --> 00:00:13.430 align:start position:0%
last element in our array
and<00:00:10.080><c> append</c><00:00:10.559><c> a</c><00:00:10.719><c> 3.</c>

00:00:13.430 --> 00:00:13.440 align:start position:0%
 
 

00:00:13.440 --> 00:00:16.710 align:start position:0%
 
so<00:00:13.840><c> just</c><00:00:14.000><c> to</c><00:00:14.160><c> look</c><00:00:14.400><c> at</c><00:00:14.480><c> our</c><00:00:14.639><c> current</c><00:00:15.040><c> array</c>

00:00:16.710 --> 00:00:16.720 align:start position:0%
so just to look at our current array
 

00:00:16.720 --> 00:00:18.790 align:start position:0%
so just to look at our current array
we'll<00:00:16.880><c> run</c><00:00:17.119><c> our</c><00:00:17.279><c> code</c><00:00:17.680><c> and</c><00:00:17.760><c> we</c><00:00:18.000><c> see</c><00:00:18.320><c> our</c><00:00:18.480><c> array</c>

00:00:18.790 --> 00:00:18.800 align:start position:0%
we'll run our code and we see our array
 

00:00:18.800 --> 00:00:19.990 align:start position:0%
we'll run our code and we see our array
contains<00:00:19.439><c> numbers</c>

00:00:19.990 --> 00:00:20.000 align:start position:0%
contains numbers
 

00:00:20.000 --> 00:00:23.670 align:start position:0%
contains numbers
0<00:00:20.400><c> through</c><00:00:20.640><c> 11.</c>

00:00:23.670 --> 00:00:23.680 align:start position:0%
 
 

00:00:23.680 --> 00:00:25.990 align:start position:0%
 
i'm<00:00:23.840><c> going</c><00:00:24.000><c> to</c><00:00:24.240><c> jump</c><00:00:24.480><c> into</c><00:00:24.720><c> irb</c><00:00:25.359><c> to</c>

00:00:25.990 --> 00:00:26.000 align:start position:0%
i'm going to jump into irb to
 

00:00:26.000 --> 00:00:27.029 align:start position:0%
i'm going to jump into irb to
demonstrate

00:00:27.029 --> 00:00:27.039 align:start position:0%
demonstrate
 

00:00:27.039 --> 00:00:29.429 align:start position:0%
demonstrate
a<00:00:27.279><c> method</c><00:00:27.680><c> we</c><00:00:27.840><c> can</c><00:00:28.000><c> use</c><00:00:28.320><c> to</c><00:00:28.480><c> remove</c><00:00:28.880><c> the</c><00:00:29.039><c> last</c>

00:00:29.429 --> 00:00:29.439 align:start position:0%
a method we can use to remove the last
 

00:00:29.439 --> 00:00:31.669 align:start position:0%
a method we can use to remove the last
element<00:00:29.840><c> of</c><00:00:30.000><c> an</c><00:00:30.160><c> array</c>

00:00:31.669 --> 00:00:31.679 align:start position:0%
element of an array
 

00:00:31.679 --> 00:00:34.150 align:start position:0%
element of an array
so<00:00:31.840><c> here</c><00:00:32.079><c> in</c><00:00:32.239><c> irb</c><00:00:32.719><c> i'm</c><00:00:32.880><c> going</c><00:00:32.960><c> to</c><00:00:33.120><c> just</c><00:00:33.920><c> create</c>

00:00:34.150 --> 00:00:34.160 align:start position:0%
so here in irb i'm going to just create
 

00:00:34.160 --> 00:00:39.670 align:start position:0%
so here in irb i'm going to just create
a<00:00:34.320><c> small</c><00:00:34.719><c> array</c><00:00:34.960><c> of</c><00:00:35.120><c> integers</c><00:00:35.680><c> 1</c><00:00:35.920><c> 2</c><00:00:36.160><c> and</c><00:00:36.399><c> 3.</c>

00:00:39.670 --> 00:00:39.680 align:start position:0%
 
 

00:00:39.680 --> 00:00:42.709 align:start position:0%
 
now<00:00:39.920><c> if</c><00:00:40.079><c> i</c><00:00:40.320><c> invoke</c><00:00:40.640><c> the</c><00:00:40.879><c> array</c><00:00:41.440><c> pop</c><00:00:41.920><c> method</c>

00:00:42.709 --> 00:00:42.719 align:start position:0%
now if i invoke the array pop method
 

00:00:42.719 --> 00:00:46.150 align:start position:0%
now if i invoke the array pop method
on<00:00:42.879><c> this</c><00:00:43.200><c> array</c><00:00:44.719><c> it</c><00:00:44.960><c> returns</c><00:00:45.520><c> the</c><00:00:45.760><c> last</c>

00:00:46.150 --> 00:00:46.160 align:start position:0%
on this array it returns the last
 

00:00:46.160 --> 00:00:48.389 align:start position:0%
on this array it returns the last
element<00:00:46.640><c> of</c><00:00:46.719><c> the</c><00:00:46.879><c> array</c>

00:00:48.389 --> 00:00:48.399 align:start position:0%
element of the array
 

00:00:48.399 --> 00:00:50.310 align:start position:0%
element of the array
but<00:00:48.559><c> that's</c><00:00:48.800><c> not</c><00:00:49.039><c> all</c><00:00:49.280><c> it</c><00:00:49.440><c> does</c><00:00:50.160><c> it</c>

00:00:50.310 --> 00:00:50.320 align:start position:0%
but that's not all it does it
 

00:00:50.320 --> 00:00:53.830 align:start position:0%
but that's not all it does it
destructively<00:00:51.199><c> removes</c><00:00:51.840><c> that</c><00:00:52.079><c> last</c><00:00:52.399><c> element</c>

00:00:53.830 --> 00:00:53.840 align:start position:0%
destructively removes that last element
 

00:00:53.840 --> 00:00:57.189 align:start position:0%
destructively removes that last element
so<00:00:54.079><c> now</c><00:00:55.120><c> if</c><00:00:55.360><c> i</c><00:00:55.520><c> examine</c><00:00:56.160><c> what</c><00:00:56.399><c> our</c><00:00:56.559><c> array</c><00:00:57.039><c> is</c>

00:00:57.189 --> 00:00:57.199 align:start position:0%
so now if i examine what our array is
 

00:00:57.199 --> 00:00:58.310 align:start position:0%
so now if i examine what our array is
currently

00:00:58.310 --> 00:00:58.320 align:start position:0%
currently
 

00:00:58.320 --> 00:01:01.270 align:start position:0%
currently
we<00:00:58.480><c> see</c><00:00:58.719><c> it</c><00:00:58.800><c> contains</c><00:00:59.440><c> only</c><00:00:59.760><c> the</c><00:00:59.920><c> elements</c><00:01:00.800><c> 1</c>

00:01:01.270 --> 00:01:01.280 align:start position:0%
we see it contains only the elements 1
 

00:01:01.280 --> 00:01:03.189 align:start position:0%
we see it contains only the elements 1
and<00:01:01.520><c> 2.</c>

00:01:03.189 --> 00:01:03.199 align:start position:0%
and 2.
 

00:01:03.199 --> 00:01:04.950 align:start position:0%
and 2.
our<00:01:03.359><c> last</c><00:01:03.680><c> element</c><00:01:04.080><c> 3</c><00:01:04.400><c> was</c><00:01:04.559><c> removed</c>

00:01:04.950 --> 00:01:04.960 align:start position:0%
our last element 3 was removed
 

00:01:04.960 --> 00:01:07.270 align:start position:0%
our last element 3 was removed
destructively<00:01:05.760><c> when</c><00:01:05.920><c> we</c><00:01:06.159><c> called</c><00:01:06.560><c> pop</c><00:01:06.960><c> on</c><00:01:07.119><c> the</c>

00:01:07.270 --> 00:01:07.280 align:start position:0%
destructively when we called pop on the
 

00:01:07.280 --> 00:01:08.710 align:start position:0%
destructively when we called pop on the
array

00:01:08.710 --> 00:01:08.720 align:start position:0%
array
 

00:01:08.720 --> 00:01:10.950 align:start position:0%
array
it<00:01:08.960><c> is</c><00:01:09.119><c> important</c><00:01:09.600><c> to</c><00:01:09.760><c> remember</c><00:01:10.240><c> that</c><00:01:10.560><c> pop</c>

00:01:10.950 --> 00:01:10.960 align:start position:0%
it is important to remember that pop
 

00:01:10.960 --> 00:01:13.030 align:start position:0%
it is important to remember that pop
returns<00:01:11.439><c> the</c><00:01:11.680><c> removed</c><00:01:12.240><c> element</c>

00:01:13.030 --> 00:01:13.040 align:start position:0%
returns the removed element
 

00:01:13.040 --> 00:01:16.870 align:start position:0%
returns the removed element
rather<00:01:13.360><c> than</c><00:01:13.600><c> the</c><00:01:13.760><c> array</c><00:01:14.080><c> itself</c>

00:01:16.870 --> 00:01:16.880 align:start position:0%
 
 

00:01:16.880 --> 00:01:19.910 align:start position:0%
 
so<00:01:17.200><c> hopping</c><00:01:17.520><c> back</c><00:01:17.759><c> to</c><00:01:17.920><c> our</c><00:01:18.080><c> text</c><00:01:18.400><c> editor</c>

00:01:19.910 --> 00:01:19.920 align:start position:0%
so hopping back to our text editor
 

00:01:19.920 --> 00:01:22.630 align:start position:0%
so hopping back to our text editor
we<00:01:20.080><c> can</c><00:01:20.320><c> remove</c><00:01:20.880><c> 11</c><00:01:21.759><c> from</c><00:01:22.000><c> the</c><00:01:22.159><c> end</c><00:01:22.320><c> of</c><00:01:22.479><c> our</c>

00:01:22.630 --> 00:01:22.640 align:start position:0%
we can remove 11 from the end of our
 

00:01:22.640 --> 00:01:24.550 align:start position:0%
we can remove 11 from the end of our
array

00:01:24.550 --> 00:01:24.560 align:start position:0%
array
 

00:01:24.560 --> 00:01:27.830 align:start position:0%
array
by<00:01:24.799><c> calling</c><00:01:25.280><c> pop</c><00:01:25.759><c> on</c><00:01:25.920><c> the</c><00:01:26.159><c> array</c>

00:01:27.830 --> 00:01:27.840 align:start position:0%
by calling pop on the array
 

00:01:27.840 --> 00:01:33.510 align:start position:0%
by calling pop on the array
the<00:01:28.080><c> next</c><00:01:28.320><c> step</c><00:01:28.640><c> here</c><00:01:28.960><c> is</c><00:01:29.200><c> to</c><00:01:29.520><c> append</c><00:01:30.000><c> a</c><00:01:30.240><c> three</c>

00:01:33.510 --> 00:01:33.520 align:start position:0%
 
 

00:01:33.520 --> 00:01:35.510 align:start position:0%
 
and<00:01:33.680><c> again</c><00:01:34.079><c> we</c><00:01:34.240><c> can</c><00:01:34.400><c> do</c><00:01:34.560><c> that</c><00:01:34.799><c> either</c><00:01:35.200><c> using</c>

00:01:35.510 --> 00:01:35.520 align:start position:0%
and again we can do that either using
 

00:01:35.520 --> 00:01:38.230 align:start position:0%
and again we can do that either using
the<00:01:35.759><c> shovel</c><00:01:36.159><c> operator</c><00:01:36.720><c> to</c><00:01:36.880><c> append</c>

00:01:38.230 --> 00:01:38.240 align:start position:0%
the shovel operator to append
 

00:01:38.240 --> 00:01:41.030 align:start position:0%
the shovel operator to append
or<00:01:38.479><c> using</c><00:01:38.960><c> the</c><00:01:39.200><c> array</c><00:01:39.759><c> push</c><00:01:40.159><c> method</c><00:01:40.799><c> which</c>

00:01:41.030 --> 00:01:41.040 align:start position:0%
or using the array push method which
 

00:01:41.040 --> 00:01:42.980 align:start position:0%
or using the array push method which
would<00:01:41.200><c> look</c><00:01:41.360><c> like</c><00:01:41.600><c> this</c>

00:01:42.980 --> 00:01:42.990 align:start position:0%
would look like this
 

00:01:42.990 --> 00:01:46.149 align:start position:0%
would look like this
[Music]

00:01:46.149 --> 00:01:46.159 align:start position:0%
[Music]
 

00:01:46.159 --> 00:01:48.310 align:start position:0%
 
now<00:01:46.320><c> let's</c><00:01:46.640><c> run</c><00:01:46.799><c> our</c><00:01:46.960><c> code</c><00:01:47.200><c> again</c><00:01:47.840><c> printing</c>

00:01:48.310 --> 00:01:48.320 align:start position:0%
now let's run our code again printing
 

00:01:48.320 --> 00:01:49.510 align:start position:0%
now let's run our code again printing
our<00:01:48.479><c> array</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
our array
 

00:01:49.520 --> 00:01:51.350 align:start position:0%
our array
and<00:01:49.680><c> we</c><00:01:49.920><c> expect</c><00:01:50.240><c> to</c><00:01:50.399><c> see</c><00:01:50.640><c> that</c><00:01:50.799><c> our</c><00:01:50.960><c> array</c>

00:01:51.350 --> 00:01:51.360 align:start position:0%
and we expect to see that our array
 

00:01:51.360 --> 00:01:52.630 align:start position:0%
and we expect to see that our array
contains<00:01:51.920><c> integers</c>

00:01:52.630 --> 00:01:52.640 align:start position:0%
contains integers
 

00:01:52.640 --> 00:01:55.510 align:start position:0%
contains integers
0<00:01:53.040><c> through</c><00:01:53.360><c> ten</c><00:01:54.159><c> and</c><00:01:54.320><c> that</c><00:01:54.479><c> the</c><00:01:54.640><c> last</c><00:01:54.960><c> element</c>

00:01:55.510 --> 00:01:55.520 align:start position:0%
0 through ten and that the last element
 

00:01:55.520 --> 00:02:06.830 align:start position:0%
0 through ten and that the last element
is

00:02:06.830 --> 00:02:06.840 align:start position:0%
 
 

00:02:06.840 --> 00:02:11.190 align:start position:0%
 
three

00:02:11.190 --> 00:02:11.200 align:start position:0%
 
 

00:02:11.200 --> 00:02:13.280 align:start position:0%
 
you

