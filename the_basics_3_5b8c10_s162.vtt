WEBVTT
Kind: captions
Language: en

00:00:04.240 --> 00:00:05.269 align:start position:0%
 
we've<00:00:04.480><c> been</c><00:00:04.799><c> asked</c>

00:00:05.269 --> 00:00:05.279 align:start position:0%
we've been asked
 

00:00:05.279 --> 00:00:08.470 align:start position:0%
we've been asked
to<00:00:05.680><c> write</c><00:00:05.920><c> a</c><00:00:06.160><c> program</c><00:00:06.960><c> that</c><00:00:07.200><c> uses</c><00:00:07.680><c> a</c><00:00:07.759><c> hash</c><00:00:08.240><c> to</c>

00:00:08.470 --> 00:00:08.480 align:start position:0%
to write a program that uses a hash to
 

00:00:08.480 --> 00:00:10.390 align:start position:0%
to write a program that uses a hash to
store<00:00:08.800><c> a</c><00:00:08.960><c> list</c><00:00:09.200><c> of</c><00:00:09.360><c> movie</c><00:00:09.760><c> titles</c>

00:00:10.390 --> 00:00:10.400 align:start position:0%
store a list of movie titles
 

00:00:10.400 --> 00:00:13.350 align:start position:0%
store a list of movie titles
in<00:00:10.559><c> the</c><00:00:10.719><c> year</c><00:00:10.960><c> they</c><00:00:11.120><c> came</c><00:00:11.440><c> out</c><00:00:12.480><c> we'll</c><00:00:12.719><c> then</c><00:00:13.040><c> use</c>

00:00:13.350 --> 00:00:13.360 align:start position:0%
in the year they came out we'll then use
 

00:00:13.360 --> 00:00:14.709 align:start position:0%
in the year they came out we'll then use
the<00:00:13.599><c> put</c><00:00:13.920><c> s</c><00:00:14.160><c> method</c>

00:00:14.709 --> 00:00:14.719 align:start position:0%
the put s method
 

00:00:14.719 --> 00:00:17.670 align:start position:0%
the put s method
to<00:00:15.440><c> print</c><00:00:15.920><c> out</c><00:00:16.160><c> the</c><00:00:16.320><c> year</c><00:00:16.720><c> of</c><00:00:16.960><c> each</c><00:00:17.199><c> movie</c><00:00:17.520><c> to</c>

00:00:17.670 --> 00:00:17.680 align:start position:0%
to print out the year of each movie to
 

00:00:17.680 --> 00:00:18.950 align:start position:0%
to print out the year of each movie to
the<00:00:17.840><c> screen</c>

00:00:18.950 --> 00:00:18.960 align:start position:0%
the screen
 

00:00:18.960 --> 00:00:21.590 align:start position:0%
the screen
and<00:00:19.119><c> we've</c><00:00:19.279><c> been</c><00:00:19.439><c> given</c><00:00:19.840><c> some</c><00:00:20.080><c> example</c><00:00:20.640><c> output</c>

00:00:21.590 --> 00:00:21.600 align:start position:0%
and we've been given some example output
 

00:00:21.600 --> 00:00:25.429 align:start position:0%
and we've been given some example output
so<00:00:21.840><c> let's</c><00:00:22.000><c> go</c><00:00:22.160><c> ahead</c><00:00:22.480><c> and</c><00:00:22.640><c> create</c><00:00:22.960><c> our</c><00:00:23.199><c> hash</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
so let's go ahead and create our hash
 

00:00:25.439 --> 00:00:28.470 align:start position:0%
so let's go ahead and create our hash
we'll<00:00:25.599><c> call</c><00:00:25.840><c> it</c><00:00:26.080><c> movies</c><00:00:27.359><c> we</c><00:00:27.599><c> surround</c><00:00:28.080><c> a</c><00:00:28.160><c> hash</c>

00:00:28.470 --> 00:00:28.480 align:start position:0%
we'll call it movies we surround a hash
 

00:00:28.480 --> 00:00:30.230 align:start position:0%
we'll call it movies we surround a hash
with<00:00:28.720><c> curly</c><00:00:29.119><c> braces</c>

00:00:30.230 --> 00:00:30.240 align:start position:0%
with curly braces
 

00:00:30.240 --> 00:00:33.590 align:start position:0%
with curly braces
and<00:00:30.400><c> a</c><00:00:30.480><c> hash</c><00:00:30.880><c> consists</c><00:00:31.760><c> of</c><00:00:32.320><c> comma</c><00:00:32.719><c> separated</c>

00:00:33.590 --> 00:00:33.600 align:start position:0%
and a hash consists of comma separated
 

00:00:33.600 --> 00:00:37.830 align:start position:0%
and a hash consists of comma separated
key<00:00:33.840><c> value</c><00:00:34.320><c> pairs</c>

00:00:37.830 --> 00:00:37.840 align:start position:0%
 
 

00:00:37.840 --> 00:00:41.030 align:start position:0%
 
we'll<00:00:38.079><c> use</c><00:00:38.320><c> the</c><00:00:38.480><c> movie</c><00:00:38.879><c> title</c><00:00:39.440><c> as</c><00:00:39.680><c> the</c><00:00:39.920><c> key</c><00:00:40.800><c> and</c>

00:00:41.030 --> 00:00:41.040 align:start position:0%
we'll use the movie title as the key and
 

00:00:41.040 --> 00:00:42.150 align:start position:0%
we'll use the movie title as the key and
the<00:00:41.200><c> year</c><00:00:41.440><c> it</c><00:00:41.600><c> came</c><00:00:41.840><c> out</c>

00:00:42.150 --> 00:00:42.160 align:start position:0%
the year it came out
 

00:00:42.160 --> 00:01:09.510 align:start position:0%
the year it came out
as<00:00:42.480><c> the</c><00:00:42.840><c> value</c>

00:01:09.510 --> 00:01:09.520 align:start position:0%
 
 

00:01:09.520 --> 00:01:11.910 align:start position:0%
 
so<00:01:09.760><c> now</c><00:01:09.920><c> that</c><00:01:10.080><c> we've</c><00:01:10.320><c> got</c><00:01:10.560><c> our</c><00:01:10.720><c> hash</c><00:01:11.200><c> with</c><00:01:11.600><c> five</c>

00:01:11.910 --> 00:01:11.920 align:start position:0%
so now that we've got our hash with five
 

00:01:11.920 --> 00:01:12.550 align:start position:0%
so now that we've got our hash with five
movies

00:01:12.550 --> 00:01:12.560 align:start position:0%
movies
 

00:01:12.560 --> 00:01:15.350 align:start position:0%
movies
we<00:01:12.799><c> want</c><00:01:13.040><c> to</c><00:01:13.439><c> output</c><00:01:14.080><c> only</c><00:01:14.400><c> the</c><00:01:14.640><c> release</c><00:01:15.119><c> year</c>

00:01:15.350 --> 00:01:15.360 align:start position:0%
we want to output only the release year
 

00:01:15.360 --> 00:01:16.710 align:start position:0%
we want to output only the release year
for<00:01:15.600><c> each</c><00:01:15.920><c> movie</c>

00:01:16.710 --> 00:01:16.720 align:start position:0%
for each movie
 

00:01:16.720 --> 00:01:19.190 align:start position:0%
for each movie
which<00:01:17.119><c> is</c><00:01:17.360><c> the</c><00:01:17.600><c> value</c><00:01:18.240><c> in</c><00:01:18.400><c> each</c><00:01:18.640><c> of</c><00:01:18.799><c> our</c><00:01:18.960><c> key</c>

00:01:19.190 --> 00:01:19.200 align:start position:0%
which is the value in each of our key
 

00:01:19.200 --> 00:01:23.030 align:start position:0%
which is the value in each of our key
value<00:01:19.600><c> pairs</c>

00:01:23.030 --> 00:01:23.040 align:start position:0%
 
 

00:01:23.040 --> 00:01:25.510 align:start position:0%
 
we<00:01:23.200><c> can</c><00:01:23.439><c> do</c><00:01:23.600><c> this</c><00:01:24.080><c> using</c><00:01:24.640><c> hash</c><00:01:25.119><c> element</c>

00:01:25.510 --> 00:01:25.520 align:start position:0%
we can do this using hash element
 

00:01:25.520 --> 00:01:27.590 align:start position:0%
we can do this using hash element
reference

00:01:27.590 --> 00:01:27.600 align:start position:0%
reference
 

00:01:27.600 --> 00:01:30.469 align:start position:0%
reference
the<00:01:27.840><c> syntax</c><00:01:28.560><c> to</c><00:01:29.040><c> access</c><00:01:29.439><c> the</c><00:01:29.680><c> value</c><00:01:30.240><c> of</c><00:01:30.400><c> a</c>

00:01:30.469 --> 00:01:30.479 align:start position:0%
the syntax to access the value of a
 

00:01:30.479 --> 00:01:33.990 align:start position:0%
the syntax to access the value of a
given<00:01:30.880><c> key</c><00:01:31.119><c> value</c><00:01:31.600><c> pair</c><00:01:32.000><c> in</c><00:01:32.159><c> a</c><00:01:32.320><c> hash</c>

00:01:33.990 --> 00:01:34.000 align:start position:0%
given key value pair in a hash
 

00:01:34.000 --> 00:01:37.190 align:start position:0%
given key value pair in a hash
is<00:01:34.320><c> to</c><00:01:34.479><c> use</c><00:01:34.880><c> square</c><00:01:35.200><c> brackets</c><00:01:36.400><c> and</c><00:01:36.720><c> pass</c><00:01:37.040><c> in</c>

00:01:37.190 --> 00:01:37.200 align:start position:0%
is to use square brackets and pass in
 

00:01:37.200 --> 00:01:38.870 align:start position:0%
is to use square brackets and pass in
the<00:01:37.439><c> key</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
the key
 

00:01:38.880 --> 00:01:42.870 align:start position:0%
the key
so<00:01:39.200><c> in</c><00:01:39.360><c> this</c><00:01:39.520><c> case</c><00:01:39.920><c> our</c><00:01:40.079><c> keys</c><00:01:40.400><c> are</c><00:01:40.640><c> symbols</c>

00:01:42.870 --> 00:01:42.880 align:start position:0%
so in this case our keys are symbols
 

00:01:42.880 --> 00:01:45.350 align:start position:0%
so in this case our keys are symbols
let's<00:01:43.200><c> access</c><00:01:43.680><c> the</c><00:01:43.840><c> value</c><00:01:44.479><c> of</c><00:01:44.720><c> our</c><00:01:44.880><c> first</c><00:01:45.200><c> key</c>

00:01:45.350 --> 00:01:45.360 align:start position:0%
let's access the value of our first key
 

00:01:45.360 --> 00:01:46.710 align:start position:0%
let's access the value of our first key
value<00:01:45.840><c> pair</c>

00:01:46.710 --> 00:01:46.720 align:start position:0%
value pair
 

00:01:46.720 --> 00:01:49.030 align:start position:0%
value pair
so<00:01:46.960><c> we'll</c><00:01:47.200><c> pass</c><00:01:47.439><c> in</c><00:01:47.600><c> the</c><00:01:47.840><c> symbol</c><00:01:48.320><c> representing</c>

00:01:49.030 --> 00:01:49.040 align:start position:0%
so we'll pass in the symbol representing
 

00:01:49.040 --> 00:01:50.550 align:start position:0%
so we'll pass in the symbol representing
the<00:01:49.200><c> movie</c><00:01:49.520><c> jaws</c>

00:01:50.550 --> 00:01:50.560 align:start position:0%
the movie jaws
 

00:01:50.560 --> 00:01:52.550 align:start position:0%
the movie jaws
and<00:01:50.720><c> when</c><00:01:50.880><c> we</c><00:01:51.040><c> run</c><00:01:51.280><c> our</c><00:01:51.439><c> file</c><00:01:51.920><c> we'll</c><00:01:52.159><c> expect</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
and when we run our file we'll expect
 

00:01:52.560 --> 00:01:54.190 align:start position:0%
and when we run our file we'll expect
that<00:01:52.880><c> the</c><00:01:53.119><c> value</c>

00:01:54.190 --> 00:01:54.200 align:start position:0%
that the value
 

00:01:54.200 --> 00:02:00.310 align:start position:0%
that the value
1975<00:01:55.600><c> is</c><00:01:55.759><c> what</c><00:01:55.920><c> will</c><00:01:56.079><c> be</c><00:01:56.320><c> output</c>

00:02:00.310 --> 00:02:00.320 align:start position:0%
 
 

00:02:00.320 --> 00:02:03.990 align:start position:0%
 
and<00:02:00.399><c> that's</c><00:02:00.640><c> what</c><00:02:00.799><c> we</c><00:02:01.040><c> see</c>

00:02:03.990 --> 00:02:04.000 align:start position:0%
 
 

00:02:04.000 --> 00:02:08.710 align:start position:0%
 
returning<00:02:04.560><c> to</c><00:02:04.719><c> our</c><00:02:04.880><c> text</c><00:02:06.840><c> editor</c>

00:02:08.710 --> 00:02:08.720 align:start position:0%
returning to our text editor
 

00:02:08.720 --> 00:02:26.229 align:start position:0%
returning to our text editor
we<00:02:08.879><c> want</c><00:02:09.039><c> to</c><00:02:09.280><c> output</c><00:02:09.920><c> each</c><00:02:10.080><c> of</c><00:02:10.239><c> the</c><00:02:20.840><c> years</c>

00:02:26.229 --> 00:02:26.239 align:start position:0%
 
 

00:02:26.239 --> 00:02:28.470 align:start position:0%
 
and<00:02:26.400><c> now</c><00:02:26.560><c> we</c><00:02:26.800><c> expect</c><00:02:27.200><c> to</c><00:02:27.360><c> see</c><00:02:27.680><c> each</c><00:02:28.000><c> value</c>

00:02:28.470 --> 00:02:28.480 align:start position:0%
and now we expect to see each value
 

00:02:28.480 --> 00:02:33.350 align:start position:0%
and now we expect to see each value
printed<00:02:28.879><c> when</c><00:02:29.040><c> we</c><00:02:29.200><c> run</c><00:02:29.440><c> our</c><00:02:29.680><c> program</c>

00:02:33.350 --> 00:02:33.360 align:start position:0%
 
 

00:02:33.360 --> 00:02:41.830 align:start position:0%
 
and<00:02:33.519><c> we</c><00:02:34.840><c> do</c>

00:02:41.830 --> 00:02:41.840 align:start position:0%
 
 

00:02:41.840 --> 00:02:43.920 align:start position:0%
 
you

