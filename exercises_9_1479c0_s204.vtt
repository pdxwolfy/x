WEBVTT
Kind: captions
Language: en

00:00:05.120 --> 00:00:06.230 align:start position:0%
 
the<00:00:05.279><c> first</c><00:00:05.520><c> step</c><00:00:05.759><c> of</c><00:00:05.920><c> this</c>

00:00:06.230 --> 00:00:06.240 align:start position:0%
the first step of this
 

00:00:06.240 --> 00:00:09.350 align:start position:0%
the first step of this
exercise<00:00:07.200><c> is</c><00:00:07.520><c> just</c><00:00:07.759><c> to</c><00:00:07.919><c> get</c><00:00:08.080><c> the</c><00:00:08.320><c> value</c><00:00:08.960><c> of</c>

00:00:09.350 --> 00:00:09.360 align:start position:0%
exercise is just to get the value of
 

00:00:09.360 --> 00:00:12.789 align:start position:0%
exercise is just to get the value of
key<00:00:09.760><c> b</c><00:00:10.880><c> so</c><00:00:11.200><c> we've</c><00:00:11.440><c> got</c><00:00:11.679><c> a</c><00:00:11.840><c> hash</c><00:00:12.080><c> here</c><00:00:12.320><c> on</c><00:00:12.480><c> line</c>

00:00:12.789 --> 00:00:12.799 align:start position:0%
key b so we've got a hash here on line
 

00:00:12.799 --> 00:00:13.350 align:start position:0%
key b so we've got a hash here on line
one

00:00:13.350 --> 00:00:13.360 align:start position:0%
one
 

00:00:13.360 --> 00:00:15.589 align:start position:0%
one
and<00:00:13.599><c> we</c><00:00:13.759><c> want</c><00:00:14.000><c> to</c><00:00:14.400><c> retrieve</c><00:00:14.880><c> the</c><00:00:15.040><c> value</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
and we want to retrieve the value
 

00:00:15.599 --> 00:00:17.189 align:start position:0%
and we want to retrieve the value
associated<00:00:16.400><c> with</c><00:00:16.560><c> the</c><00:00:16.800><c> key</c>

00:00:17.189 --> 00:00:17.199 align:start position:0%
associated with the key
 

00:00:17.199 --> 00:00:20.550 align:start position:0%
associated with the key
that<00:00:17.440><c> is</c><00:00:17.600><c> the</c><00:00:17.840><c> symbol</c><00:00:18.480><c> b</c><00:00:20.000><c> we</c><00:00:20.160><c> can</c>

00:00:20.550 --> 00:00:20.560 align:start position:0%
that is the symbol b we can
 

00:00:20.560 --> 00:00:24.150 align:start position:0%
that is the symbol b we can
do<00:00:20.800><c> this</c><00:00:21.039><c> using</c><00:00:21.520><c> element</c><00:00:22.000><c> reference</c>

00:00:24.150 --> 00:00:24.160 align:start position:0%
do this using element reference
 

00:00:24.160 --> 00:00:27.750 align:start position:0%
do this using element reference
when<00:00:24.400><c> working</c><00:00:24.720><c> with</c><00:00:24.960><c> a</c><00:00:25.039><c> hash</c><00:00:26.480><c> we</c><00:00:26.720><c> can</c><00:00:26.960><c> access</c><00:00:27.519><c> a</c>

00:00:27.750 --> 00:00:27.760 align:start position:0%
when working with a hash we can access a
 

00:00:27.760 --> 00:00:28.870 align:start position:0%
when working with a hash we can access a
value

00:00:28.870 --> 00:00:28.880 align:start position:0%
value
 

00:00:28.880 --> 00:00:31.509 align:start position:0%
value
by<00:00:29.119><c> passing</c><00:00:29.599><c> in</c><00:00:29.760><c> a</c><00:00:30.080><c> key</c><00:00:30.720><c> to</c><00:00:30.880><c> these</c><00:00:31.199><c> square</c>

00:00:31.509 --> 00:00:31.519 align:start position:0%
by passing in a key to these square
 

00:00:31.519 --> 00:00:32.549 align:start position:0%
by passing in a key to these square
brackets

00:00:32.549 --> 00:00:32.559 align:start position:0%
brackets
 

00:00:32.559 --> 00:00:34.470 align:start position:0%
brackets
so<00:00:32.719><c> we</c><00:00:32.880><c> know</c><00:00:33.040><c> we</c><00:00:33.120><c> want</c><00:00:33.360><c> to</c><00:00:33.520><c> access</c><00:00:33.840><c> the</c><00:00:34.000><c> value</c>

00:00:34.470 --> 00:00:34.480 align:start position:0%
so we know we want to access the value
 

00:00:34.480 --> 00:00:35.990 align:start position:0%
so we know we want to access the value
associated<00:00:35.120><c> with</c><00:00:35.280><c> the</c><00:00:35.520><c> key</c>

00:00:35.990 --> 00:00:36.000 align:start position:0%
associated with the key
 

00:00:36.000 --> 00:00:40.549 align:start position:0%
associated with the key
b<00:00:38.800><c> and</c><00:00:39.040><c> on</c><00:00:39.200><c> line</c><00:00:39.440><c> three</c><00:00:39.680><c> i'm</c><00:00:39.840><c> going</c><00:00:40.000><c> to</c><00:00:40.160><c> use</c>

00:00:40.549 --> 00:00:40.559 align:start position:0%
b and on line three i'm going to use
 

00:00:40.559 --> 00:00:43.990 align:start position:0%
b and on line three i'm going to use
p<00:00:41.040><c> to</c><00:00:41.520><c> output</c><00:00:41.840><c> this</c><00:00:42.079><c> so</c><00:00:42.239><c> we</c><00:00:42.399><c> can</c><00:00:42.559><c> see</c><00:00:42.800><c> the</c><00:00:42.960><c> value</c>

00:00:43.990 --> 00:00:44.000 align:start position:0%
p to output this so we can see the value
 

00:00:44.000 --> 00:00:50.549 align:start position:0%
p to output this so we can see the value
we<00:00:44.160><c> expect</c><00:00:44.559><c> that</c><00:00:44.719><c> it'll</c><00:00:44.879><c> be</c><00:00:45.200><c> two</c>

00:00:50.549 --> 00:00:50.559 align:start position:0%
 
 

00:00:50.559 --> 00:00:54.150 align:start position:0%
 
and<00:00:50.719><c> that's</c><00:00:50.960><c> what</c><00:00:51.039><c> we</c><00:00:51.280><c> see</c>

00:00:54.150 --> 00:00:54.160 align:start position:0%
 
 

00:00:54.160 --> 00:00:58.069 align:start position:0%
 
the<00:00:54.320><c> next</c><00:00:54.559><c> step</c><00:00:54.960><c> here</c><00:00:55.360><c> is</c><00:00:55.600><c> to</c><00:00:56.320><c> add</c><00:00:56.640><c> to</c><00:00:56.800><c> the</c><00:00:57.039><c> hash</c>

00:00:58.069 --> 00:00:58.079 align:start position:0%
the next step here is to add to the hash
 

00:00:58.079 --> 00:01:01.910 align:start position:0%
the next step here is to add to the hash
a<00:00:58.239><c> new</c><00:00:58.480><c> key</c><00:00:58.719><c> value</c><00:00:59.199><c> pair</c>

00:01:01.910 --> 00:01:01.920 align:start position:0%
 
 

00:01:01.920 --> 00:01:03.590 align:start position:0%
 
and<00:01:02.000><c> to</c><00:01:02.160><c> do</c><00:01:02.320><c> this</c><00:01:02.559><c> we'll</c><00:01:02.800><c> use</c><00:01:03.039><c> element</c>

00:01:03.590 --> 00:01:03.600 align:start position:0%
and to do this we'll use element
 

00:01:03.600 --> 00:01:05.670 align:start position:0%
and to do this we'll use element
assignment

00:01:05.670 --> 00:01:05.680 align:start position:0%
assignment
 

00:01:05.680 --> 00:01:07.670 align:start position:0%
assignment
in<00:01:05.760><c> the</c><00:01:05.920><c> square</c><00:01:06.320><c> brackets</c><00:01:06.799><c> we'll</c><00:01:07.040><c> place</c><00:01:07.439><c> the</c>

00:01:07.670 --> 00:01:07.680 align:start position:0%
in the square brackets we'll place the
 

00:01:07.680 --> 00:01:13.670 align:start position:0%
in the square brackets we'll place the
new<00:01:10.840><c> key</c>

00:01:13.670 --> 00:01:13.680 align:start position:0%
new key
 

00:01:13.680 --> 00:01:15.910 align:start position:0%
new key
and<00:01:13.840><c> we'll</c><00:01:14.080><c> assign</c><00:01:14.479><c> this</c><00:01:14.880><c> to</c><00:01:15.119><c> whatever</c><00:01:15.600><c> value</c>

00:01:15.910 --> 00:01:15.920 align:start position:0%
and we'll assign this to whatever value
 

00:01:15.920 --> 00:01:18.230 align:start position:0%
and we'll assign this to whatever value
we<00:01:16.080><c> want</c><00:01:16.320><c> associated</c><00:01:16.960><c> with</c><00:01:17.119><c> that</c><00:01:17.360><c> key</c>

00:01:18.230 --> 00:01:18.240 align:start position:0%
we want associated with that key
 

00:01:18.240 --> 00:01:23.510 align:start position:0%
we want associated with that key
in<00:01:18.400><c> this</c><00:01:18.640><c> case</c><00:01:18.960><c> the</c><00:01:19.119><c> integer</c><00:01:19.600><c> 5.</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
 
 

00:01:23.520 --> 00:01:26.630 align:start position:0%
 
now<00:01:23.759><c> on</c><00:01:23.920><c> line</c><00:01:24.320><c> 7</c><00:01:24.960><c> i'll</c><00:01:25.200><c> output</c><00:01:25.600><c> our</c><00:01:25.759><c> hash</c>

00:01:26.630 --> 00:01:26.640 align:start position:0%
now on line 7 i'll output our hash
 

00:01:26.640 --> 00:01:28.950 align:start position:0%
now on line 7 i'll output our hash
and<00:01:26.799><c> we</c><00:01:27.040><c> expect</c><00:01:27.520><c> to</c><00:01:27.680><c> see</c><00:01:28.080><c> five</c><00:01:28.320><c> key</c><00:01:28.560><c> value</c>

00:01:28.950 --> 00:01:28.960 align:start position:0%
and we expect to see five key value
 

00:01:28.960 --> 00:01:34.390 align:start position:0%
and we expect to see five key value
pairs

00:01:34.390 --> 00:01:34.400 align:start position:0%
 
 

00:01:34.400 --> 00:01:37.590 align:start position:0%
 
and<00:01:34.479><c> that's</c><00:01:34.720><c> what</c><00:01:34.880><c> we</c><00:01:35.040><c> see</c>

00:01:37.590 --> 00:01:37.600 align:start position:0%
 
 

00:01:37.600 --> 00:01:40.390 align:start position:0%
 
the<00:01:37.840><c> last</c><00:01:38.079><c> step</c><00:01:38.400><c> here</c><00:01:38.799><c> is</c><00:01:39.040><c> to</c><00:01:39.280><c> remove</c><00:01:39.759><c> all</c><00:01:40.159><c> key</c>

00:01:40.390 --> 00:01:40.400 align:start position:0%
the last step here is to remove all key
 

00:01:40.400 --> 00:01:41.749 align:start position:0%
the last step here is to remove all key
value<00:01:40.880><c> pairs</c>

00:01:41.749 --> 00:01:41.759 align:start position:0%
value pairs
 

00:01:41.759 --> 00:01:45.109 align:start position:0%
value pairs
whose<00:01:42.159><c> value</c><00:01:42.720><c> is</c><00:01:42.960><c> less</c><00:01:43.280><c> than</c><00:01:43.600><c> 3.5</c>

00:01:45.109 --> 00:01:45.119 align:start position:0%
whose value is less than 3.5
 

00:01:45.119 --> 00:01:48.230 align:start position:0%
whose value is less than 3.5
and<00:01:45.280><c> to</c><00:01:45.520><c> do</c><00:01:45.680><c> this</c><00:01:46.320><c> we</c><00:01:46.479><c> can</c><00:01:46.720><c> use</c><00:01:47.119><c> the</c><00:01:47.520><c> delete</c>

00:01:48.230 --> 00:01:48.240 align:start position:0%
and to do this we can use the delete
 

00:01:48.240 --> 00:01:55.590 align:start position:0%
and to do this we can use the delete
if<00:01:52.840><c> method</c>

00:01:55.590 --> 00:01:55.600 align:start position:0%
if method
 

00:01:55.600 --> 00:01:57.990 align:start position:0%
if method
as<00:01:55.840><c> the</c><00:01:56.000><c> delete</c><00:01:56.479><c> if</c><00:01:56.719><c> method</c><00:01:57.200><c> iterates</c><00:01:57.759><c> through</c>

00:01:57.990 --> 00:01:58.000 align:start position:0%
as the delete if method iterates through
 

00:01:58.000 --> 00:01:59.190 align:start position:0%
as the delete if method iterates through
our<00:01:58.159><c> hash</c>

00:01:59.190 --> 00:01:59.200 align:start position:0%
our hash
 

00:01:59.200 --> 00:02:01.429 align:start position:0%
our hash
each<00:01:59.520><c> key</c><00:01:59.680><c> value</c><00:02:00.159><c> pair</c><00:02:00.560><c> will</c><00:02:00.719><c> be</c><00:02:00.880><c> passed</c><00:02:01.200><c> as</c>

00:02:01.429 --> 00:02:01.439 align:start position:0%
each key value pair will be passed as
 

00:02:01.439 --> 00:02:04.469 align:start position:0%
each key value pair will be passed as
arguments<00:02:02.000><c> to</c><00:02:02.159><c> the</c><00:02:02.399><c> block</c>

00:02:04.469 --> 00:02:04.479 align:start position:0%
arguments to the block
 

00:02:04.479 --> 00:02:06.709 align:start position:0%
arguments to the block
our<00:02:04.640><c> block</c><00:02:04.960><c> parameter</c><00:02:05.680><c> k</c><00:02:06.000><c> will</c><00:02:06.159><c> be</c><00:02:06.320><c> assigned</c>

00:02:06.709 --> 00:02:06.719 align:start position:0%
our block parameter k will be assigned
 

00:02:06.719 --> 00:02:08.389 align:start position:0%
our block parameter k will be assigned
to<00:02:06.880><c> reference</c><00:02:07.280><c> the</c><00:02:07.520><c> key</c>

00:02:08.389 --> 00:02:08.399 align:start position:0%
to reference the key
 

00:02:08.399 --> 00:02:10.710 align:start position:0%
to reference the key
and<00:02:08.640><c> our</c><00:02:08.800><c> block</c><00:02:09.119><c> parameter</c><00:02:09.759><c> v</c><00:02:10.080><c> will</c><00:02:10.239><c> reference</c>

00:02:10.710 --> 00:02:10.720 align:start position:0%
and our block parameter v will reference
 

00:02:10.720 --> 00:02:12.360 align:start position:0%
and our block parameter v will reference
the<00:02:10.879><c> value</c>

00:02:12.360 --> 00:02:12.370 align:start position:0%
the value
 

00:02:12.370 --> 00:02:13.670 align:start position:0%
the value
[Music]

00:02:13.670 --> 00:02:13.680 align:start position:0%
[Music]
 

00:02:13.680 --> 00:02:16.869 align:start position:0%
[Music]
now<00:02:14.080><c> the</c><00:02:14.239><c> delete</c><00:02:14.800><c> if</c><00:02:15.120><c> method</c><00:02:15.760><c> deletes</c><00:02:16.400><c> every</c>

00:02:16.869 --> 00:02:16.879 align:start position:0%
now the delete if method deletes every
 

00:02:16.879 --> 00:02:18.150 align:start position:0%
now the delete if method deletes every
key<00:02:17.200><c> value</c><00:02:17.760><c> pair</c>

00:02:18.150 --> 00:02:18.160 align:start position:0%
key value pair
 

00:02:18.160 --> 00:02:21.430 align:start position:0%
key value pair
from<00:02:18.400><c> the</c><00:02:18.640><c> hash</c><00:02:19.599><c> for</c><00:02:19.760><c> which</c><00:02:20.160><c> the</c><00:02:20.480><c> return</c><00:02:20.959><c> value</c>

00:02:21.430 --> 00:02:21.440 align:start position:0%
from the hash for which the return value
 

00:02:21.440 --> 00:02:22.470 align:start position:0%
from the hash for which the return value
of<00:02:21.599><c> the</c><00:02:21.840><c> block</c>

00:02:22.470 --> 00:02:22.480 align:start position:0%
of the block
 

00:02:22.480 --> 00:02:25.589 align:start position:0%
of the block
evaluates<00:02:23.200><c> as</c><00:02:23.520><c> true</c><00:02:24.319><c> so</c><00:02:24.560><c> if</c><00:02:24.640><c> the</c><00:02:24.800><c> return</c><00:02:25.200><c> value</c>

00:02:25.589 --> 00:02:25.599 align:start position:0%
evaluates as true so if the return value
 

00:02:25.599 --> 00:02:28.070 align:start position:0%
evaluates as true so if the return value
of<00:02:25.760><c> this</c><00:02:26.000><c> block</c><00:02:26.400><c> is</c><00:02:26.640><c> truthy</c>

00:02:28.070 --> 00:02:28.080 align:start position:0%
of this block is truthy
 

00:02:28.080 --> 00:02:30.150 align:start position:0%
of this block is truthy
that<00:02:28.400><c> key</c><00:02:28.560><c> value</c><00:02:28.959><c> pair</c><00:02:29.200><c> will</c><00:02:29.360><c> be</c><00:02:29.520><c> deleted</c><00:02:29.920><c> from</c>

00:02:30.150 --> 00:02:30.160 align:start position:0%
that key value pair will be deleted from
 

00:02:30.160 --> 00:02:31.430 align:start position:0%
that key value pair will be deleted from
our<00:02:30.319><c> hash</c>

00:02:31.430 --> 00:02:31.440 align:start position:0%
our hash
 

00:02:31.440 --> 00:02:33.110 align:start position:0%
our hash
and<00:02:31.680><c> because</c><00:02:32.000><c> we</c><00:02:32.160><c> know</c><00:02:32.319><c> we</c><00:02:32.480><c> want</c><00:02:32.640><c> to</c><00:02:32.800><c> delete</c>

00:02:33.110 --> 00:02:33.120 align:start position:0%
and because we know we want to delete
 

00:02:33.120 --> 00:02:35.589 align:start position:0%
and because we know we want to delete
the<00:02:33.280><c> key</c><00:02:33.440><c> value</c><00:02:33.920><c> pair</c><00:02:34.319><c> if</c><00:02:34.560><c> the</c><00:02:34.720><c> value</c><00:02:35.200><c> is</c><00:02:35.360><c> less</c>

00:02:35.589 --> 00:02:35.599 align:start position:0%
the key value pair if the value is less
 

00:02:35.599 --> 00:02:38.070 align:start position:0%
the key value pair if the value is less
than<00:02:35.879><c> 3.5</c>

00:02:38.070 --> 00:02:38.080 align:start position:0%
than 3.5
 

00:02:38.080 --> 00:02:40.070 align:start position:0%
than 3.5
we<00:02:38.239><c> can</c><00:02:38.400><c> do</c><00:02:38.720><c> a</c><00:02:38.800><c> simple</c><00:02:39.120><c> comparison</c><00:02:39.760><c> here</c><00:02:40.000><c> on</c>

00:02:40.070 --> 00:02:40.080 align:start position:0%
we can do a simple comparison here on
 

00:02:40.080 --> 00:02:42.309 align:start position:0%
we can do a simple comparison here on
line<00:02:40.400><c> 9.</c>

00:02:42.309 --> 00:02:42.319 align:start position:0%
line 9.
 

00:02:42.319 --> 00:02:44.630 align:start position:0%
line 9.
this<00:02:42.560><c> will</c><00:02:42.720><c> return</c><00:02:43.200><c> a</c><00:02:43.360><c> boolean</c><00:02:43.920><c> either</c><00:02:44.319><c> true</c>

00:02:44.630 --> 00:02:44.640 align:start position:0%
this will return a boolean either true
 

00:02:44.640 --> 00:02:45.750 align:start position:0%
this will return a boolean either true
or<00:02:44.879><c> false</c>

00:02:45.750 --> 00:02:45.760 align:start position:0%
or false
 

00:02:45.760 --> 00:02:48.070 align:start position:0%
or false
and<00:02:45.920><c> if</c><00:02:46.080><c> it</c><00:02:46.160><c> returns</c><00:02:46.720><c> true</c><00:02:47.280><c> that</c><00:02:47.519><c> key</c><00:02:47.760><c> value</c>

00:02:48.070 --> 00:02:48.080 align:start position:0%
and if it returns true that key value
 

00:02:48.080 --> 00:02:52.390 align:start position:0%
and if it returns true that key value
pair<00:02:48.319><c> will</c><00:02:48.480><c> be</c><00:02:48.640><c> deleted</c><00:02:49.040><c> from</c><00:02:49.280><c> our</c><00:02:49.440><c> hash</c>

00:02:52.390 --> 00:02:52.400 align:start position:0%
 
 

00:02:52.400 --> 00:02:55.509 align:start position:0%
 
so<00:02:52.640><c> on</c><00:02:52.879><c> line</c><00:02:53.200><c> 12</c><00:02:54.160><c> we'll</c><00:02:54.400><c> output</c><00:02:54.800><c> our</c><00:02:54.959><c> hash</c><00:02:55.280><c> one</c>

00:02:55.509 --> 00:02:55.519 align:start position:0%
so on line 12 we'll output our hash one
 

00:02:55.519 --> 00:03:01.990 align:start position:0%
so on line 12 we'll output our hash one
last<00:02:55.840><c> time</c>

00:03:01.990 --> 00:03:02.000 align:start position:0%
 
 

00:03:02.000 --> 00:03:04.070 align:start position:0%
 
on<00:03:02.159><c> the</c><00:03:02.319><c> third</c><00:03:02.560><c> line</c><00:03:02.800><c> of</c><00:03:02.959><c> output</c><00:03:03.440><c> you</c><00:03:03.599><c> can</c><00:03:03.840><c> see</c>

00:03:04.070 --> 00:03:04.080 align:start position:0%
on the third line of output you can see
 

00:03:04.080 --> 00:03:05.509 align:start position:0%
on the third line of output you can see
that<00:03:04.239><c> our</c><00:03:04.480><c> hash</c><00:03:04.879><c> has</c><00:03:05.120><c> been</c>

00:03:05.509 --> 00:03:05.519 align:start position:0%
that our hash has been
 

00:03:05.519 --> 00:03:08.390 align:start position:0%
that our hash has been
mutated<00:03:06.159><c> destructively</c><00:03:07.440><c> by</c><00:03:07.599><c> the</c><00:03:07.760><c> delete</c><00:03:08.239><c> if</c>

00:03:08.390 --> 00:03:08.400 align:start position:0%
mutated destructively by the delete if
 

00:03:08.400 --> 00:03:09.750 align:start position:0%
mutated destructively by the delete if
method

00:03:09.750 --> 00:03:09.760 align:start position:0%
method
 

00:03:09.760 --> 00:03:11.830 align:start position:0%
method
the<00:03:09.920><c> only</c><00:03:10.159><c> remaining</c><00:03:10.720><c> key</c><00:03:10.879><c> value</c><00:03:11.280><c> pairs</c><00:03:11.680><c> in</c>

00:03:11.830 --> 00:03:11.840 align:start position:0%
the only remaining key value pairs in
 

00:03:11.840 --> 00:03:13.350 align:start position:0%
the only remaining key value pairs in
our<00:03:12.000><c> hash</c>

00:03:13.350 --> 00:03:13.360 align:start position:0%
our hash
 

00:03:13.360 --> 00:03:19.840 align:start position:0%
our hash
are<00:03:13.680><c> those</c><00:03:13.920><c> with</c><00:03:14.159><c> values</c><00:03:14.640><c> greater</c><00:03:14.959><c> than</c><00:03:16.840><c> 3.5</c>

