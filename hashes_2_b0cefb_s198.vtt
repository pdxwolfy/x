WEBVTT
Kind: captions
Language: en

00:00:03.439 --> 00:00:04.230 align:start position:0%
 
we're<00:00:03.600><c> going</c><00:00:03.919><c> to</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
we're going to
 

00:00:04.240 --> 00:00:06.230 align:start position:0%
we're going to
take<00:00:04.480><c> a</c><00:00:04.560><c> look</c><00:00:04.720><c> at</c><00:00:04.799><c> the</c><00:00:05.040><c> documentation</c><00:00:06.000><c> for</c>

00:00:06.230 --> 00:00:06.240 align:start position:0%
take a look at the documentation for
 

00:00:06.240 --> 00:00:09.110 align:start position:0%
take a look at the documentation for
ruby's<00:00:06.799><c> merge</c><00:00:07.200><c> method</c>

00:00:09.110 --> 00:00:09.120 align:start position:0%
ruby's merge method
 

00:00:09.120 --> 00:00:11.030 align:start position:0%
ruby's merge method
we'll<00:00:09.360><c> see</c><00:00:09.519><c> that</c><00:00:09.679><c> there</c><00:00:10.000><c> are</c><00:00:10.320><c> two</c><00:00:10.639><c> merge</c>

00:00:11.030 --> 00:00:11.040 align:start position:0%
we'll see that there are two merge
 

00:00:11.040 --> 00:00:12.230 align:start position:0%
we'll see that there are two merge
methods

00:00:12.230 --> 00:00:12.240 align:start position:0%
methods
 

00:00:12.240 --> 00:00:14.950 align:start position:0%
methods
one<00:00:12.639><c> has</c><00:00:12.960><c> a</c><00:00:13.200><c> bang</c><00:00:13.599><c> or</c><00:00:13.840><c> an</c><00:00:14.000><c> exclamation</c><00:00:14.559><c> mark</c><00:00:14.880><c> at</c>

00:00:14.950 --> 00:00:14.960 align:start position:0%
one has a bang or an exclamation mark at
 

00:00:14.960 --> 00:00:16.150 align:start position:0%
one has a bang or an exclamation mark at
the<00:00:15.120><c> end</c>

00:00:16.150 --> 00:00:16.160 align:start position:0%
the end
 

00:00:16.160 --> 00:00:18.230 align:start position:0%
the end
so<00:00:16.400><c> we're</c><00:00:16.640><c> going</c><00:00:16.880><c> to</c><00:00:17.359><c> write</c><00:00:17.600><c> a</c><00:00:17.680><c> little</c><00:00:17.840><c> bit</c><00:00:18.080><c> of</c>

00:00:18.230 --> 00:00:18.240 align:start position:0%
so we're going to write a little bit of
 

00:00:18.240 --> 00:00:19.990 align:start position:0%
so we're going to write a little bit of
code<00:00:18.480><c> to</c><00:00:18.640><c> see</c><00:00:18.880><c> the</c><00:00:19.039><c> difference</c><00:00:19.439><c> between</c><00:00:19.760><c> these</c>

00:00:19.990 --> 00:00:20.000 align:start position:0%
code to see the difference between these
 

00:00:20.000 --> 00:00:22.470 align:start position:0%
code to see the difference between these
two<00:00:20.240><c> methods</c>

00:00:22.470 --> 00:00:22.480 align:start position:0%
two methods
 

00:00:22.480 --> 00:00:24.950 align:start position:0%
two methods
we've<00:00:22.720><c> got</c><00:00:22.960><c> two</c><00:00:23.279><c> hashes</c><00:00:23.840><c> on</c><00:00:24.000><c> lines</c><00:00:24.400><c> one</c><00:00:24.720><c> and</c>

00:00:24.950 --> 00:00:24.960 align:start position:0%
we've got two hashes on lines one and
 

00:00:24.960 --> 00:00:25.990 align:start position:0%
we've got two hashes on lines one and
two<00:00:25.359><c> of</c><00:00:25.519><c> our</c>

00:00:25.990 --> 00:00:26.000 align:start position:0%
two of our
 

00:00:26.000 --> 00:00:29.830 align:start position:0%
two of our
text<00:00:26.320><c> editor</c><00:00:27.920><c> cat</c><00:00:28.480><c> and</c><00:00:28.800><c> weight</c>

00:00:29.830 --> 00:00:29.840 align:start position:0%
text editor cat and weight
 

00:00:29.840 --> 00:00:32.310 align:start position:0%
text editor cat and weight
and<00:00:30.160><c> each</c><00:00:30.400><c> of</c><00:00:30.560><c> these</c><00:00:30.800><c> hashes</c><00:00:31.359><c> just</c><00:00:31.599><c> has</c><00:00:32.000><c> one</c>

00:00:32.310 --> 00:00:32.320 align:start position:0%
and each of these hashes just has one
 

00:00:32.320 --> 00:00:37.350 align:start position:0%
and each of these hashes just has one
key<00:00:32.559><c> value</c><00:00:32.960><c> pair</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
 
 

00:00:37.360 --> 00:00:40.229 align:start position:0%
 
so<00:00:37.600><c> let's</c><00:00:38.000><c> output</c><00:00:38.480><c> the</c><00:00:38.640><c> return</c><00:00:39.200><c> value</c><00:00:39.840><c> of</c>

00:00:40.229 --> 00:00:40.239 align:start position:0%
so let's output the return value of
 

00:00:40.239 --> 00:00:42.830 align:start position:0%
so let's output the return value of
calling<00:00:40.719><c> merge</c><00:00:41.200><c> on</c><00:00:41.280><c> the</c><00:00:41.520><c> cat</c>

00:00:42.830 --> 00:00:42.840 align:start position:0%
calling merge on the cat
 

00:00:42.840 --> 00:00:45.750 align:start position:0%
calling merge on the cat
hash<00:00:44.000><c> and</c><00:00:44.320><c> we'll</c><00:00:44.480><c> pass</c><00:00:44.879><c> in</c><00:00:45.039><c> weight</c><00:00:45.440><c> as</c><00:00:45.600><c> the</c>

00:00:45.750 --> 00:00:45.760 align:start position:0%
hash and we'll pass in weight as the
 

00:00:45.760 --> 00:00:50.549 align:start position:0%
hash and we'll pass in weight as the
argument

00:00:50.549 --> 00:00:50.559 align:start position:0%
 
 

00:00:50.559 --> 00:00:52.389 align:start position:0%
 
running<00:00:50.960><c> our</c><00:00:51.120><c> code</c><00:00:51.600><c> you</c><00:00:51.680><c> can</c><00:00:51.840><c> see</c><00:00:52.000><c> that</c><00:00:52.160><c> this</c>

00:00:52.389 --> 00:00:52.399 align:start position:0%
running our code you can see that this
 

00:00:52.399 --> 00:00:55.430 align:start position:0%
running our code you can see that this
returns<00:00:53.039><c> a</c><00:00:53.199><c> new</c><00:00:53.440><c> hash</c>

00:00:55.430 --> 00:00:55.440 align:start position:0%
returns a new hash
 

00:00:55.440 --> 00:00:59.029 align:start position:0%
returns a new hash
with<00:00:55.760><c> both</c><00:00:56.079><c> key</c><00:00:56.320><c> value</c><00:00:56.840><c> pairs</c><00:00:58.160><c> so</c><00:00:58.399><c> the</c><00:00:58.640><c> calling</c>

00:00:59.029 --> 00:00:59.039 align:start position:0%
with both key value pairs so the calling
 

00:00:59.039 --> 00:01:01.110 align:start position:0%
with both key value pairs so the calling
hash<00:00:59.440><c> and</c><00:00:59.600><c> the</c><00:00:59.680><c> hash</c><00:01:00.000><c> that</c><00:01:00.160><c> was</c><00:01:00.320><c> passed</c><00:01:00.719><c> in</c><00:01:00.879><c> as</c>

00:01:01.110 --> 00:01:01.120 align:start position:0%
hash and the hash that was passed in as
 

00:01:01.120 --> 00:01:02.229 align:start position:0%
hash and the hash that was passed in as
an<00:01:01.280><c> argument</c>

00:01:02.229 --> 00:01:02.239 align:start position:0%
an argument
 

00:01:02.239 --> 00:01:05.590 align:start position:0%
an argument
have<00:01:02.480><c> been</c><00:01:02.719><c> merged</c><00:01:03.280><c> into</c><00:01:03.680><c> one</c><00:01:04.000><c> hash</c><00:01:04.960><c> with</c>

00:01:05.590 --> 00:01:05.600 align:start position:0%
have been merged into one hash with
 

00:01:05.600 --> 00:01:11.990 align:start position:0%
have been merged into one hash with
all<00:01:05.840><c> key</c><00:01:06.080><c> value</c><00:01:10.840><c> pairs</c>

00:01:11.990 --> 00:01:12.000 align:start position:0%
all key value pairs
 

00:01:12.000 --> 00:01:14.630 align:start position:0%
all key value pairs
we<00:01:12.159><c> can</c><00:01:12.400><c> see</c><00:01:12.560><c> that</c><00:01:12.960><c> this</c><00:01:13.280><c> merge</c><00:01:13.680><c> returns</c><00:01:14.240><c> a</c><00:01:14.400><c> new</c>

00:01:14.630 --> 00:01:14.640 align:start position:0%
we can see that this merge returns a new
 

00:01:14.640 --> 00:01:15.830 align:start position:0%
we can see that this merge returns a new
array

00:01:15.830 --> 00:01:15.840 align:start position:0%
array
 

00:01:15.840 --> 00:01:19.910 align:start position:0%
array
by<00:01:16.159><c> then</c><00:01:16.640><c> outputting</c><00:01:18.400><c> cat</c>

00:01:19.910 --> 00:01:19.920 align:start position:0%
by then outputting cat
 

00:01:19.920 --> 00:01:24.830 align:start position:0%
by then outputting cat
and<00:01:20.159><c> weight</c><00:01:21.119><c> after</c><00:01:21.520><c> we</c><00:01:21.759><c> invoke</c><00:01:22.240><c> this</c><00:01:22.479><c> merge</c>

00:01:24.830 --> 00:01:24.840 align:start position:0%
 
 

00:01:24.840 --> 00:01:27.510 align:start position:0%
 
method

00:01:27.510 --> 00:01:27.520 align:start position:0%
method
 

00:01:27.520 --> 00:01:29.429 align:start position:0%
method
you<00:01:27.680><c> can</c><00:01:27.920><c> see</c><00:01:28.080><c> that</c><00:01:28.400><c> although</c><00:01:28.880><c> the</c><00:01:29.119><c> merge</c>

00:01:29.429 --> 00:01:29.439 align:start position:0%
you can see that although the merge
 

00:01:29.439 --> 00:01:30.550 align:start position:0%
you can see that although the merge
method<00:01:29.840><c> returned</c>

00:01:30.550 --> 00:01:30.560 align:start position:0%
method returned
 

00:01:30.560 --> 00:01:33.670 align:start position:0%
method returned
a<00:01:30.720><c> new</c><00:01:30.960><c> array</c><00:01:31.360><c> with</c><00:01:31.759><c> both</c><00:01:32.000><c> key</c><00:01:32.240><c> value</c><00:01:32.640><c> pairs</c><00:01:33.439><c> as</c>

00:01:33.670 --> 00:01:33.680 align:start position:0%
a new array with both key value pairs as
 

00:01:33.680 --> 00:01:35.990 align:start position:0%
a new array with both key value pairs as
seen<00:01:33.920><c> on</c><00:01:34.079><c> the</c><00:01:34.159><c> first</c><00:01:34.479><c> line</c><00:01:34.720><c> of</c><00:01:34.880><c> output</c>

00:01:35.990 --> 00:01:36.000 align:start position:0%
seen on the first line of output
 

00:01:36.000 --> 00:01:38.710 align:start position:0%
seen on the first line of output
the<00:01:36.240><c> original</c><00:01:36.799><c> hashes</c><00:01:37.520><c> cat</c><00:01:37.920><c> and</c><00:01:38.079><c> weight</c><00:01:38.479><c> were</c>

00:01:38.710 --> 00:01:38.720 align:start position:0%
the original hashes cat and weight were
 

00:01:38.720 --> 00:01:42.710 align:start position:0%
the original hashes cat and weight were
not<00:01:38.960><c> changed</c>

00:01:42.710 --> 00:01:42.720 align:start position:0%
 
 

00:01:42.720 --> 00:01:45.109 align:start position:0%
 
so<00:01:42.960><c> this</c><00:01:43.280><c> merge</c><00:01:43.680><c> the</c><00:01:43.840><c> merge</c><00:01:44.159><c> without</c><00:01:44.479><c> a</c><00:01:44.640><c> bang</c>

00:01:45.109 --> 00:01:45.119 align:start position:0%
so this merge the merge without a bang
 

00:01:45.119 --> 00:01:46.310 align:start position:0%
so this merge the merge without a bang
is<00:01:45.280><c> not</c><00:01:45.520><c> destructive</c>

00:01:46.310 --> 00:01:46.320 align:start position:0%
is not destructive
 

00:01:46.320 --> 00:01:50.950 align:start position:0%
is not destructive
it<00:01:46.479><c> simply</c><00:01:46.799><c> returns</c><00:01:47.360><c> a</c><00:01:47.439><c> new</c><00:01:47.680><c> hash</c>

00:01:50.950 --> 00:01:50.960 align:start position:0%
 
 

00:01:50.960 --> 00:01:56.630 align:start position:0%
 
now<00:01:51.200><c> i'm</c><00:01:51.360><c> going</c><00:01:51.520><c> to</c><00:01:51.759><c> comment</c><00:01:52.240><c> out</c><00:01:52.479><c> this</c><00:01:52.840><c> code</c>

00:01:56.630 --> 00:01:56.640 align:start position:0%
 
 

00:01:56.640 --> 00:01:58.789 align:start position:0%
 
and<00:01:56.799><c> let's</c><00:01:57.119><c> demonstrate</c><00:01:57.680><c> the</c><00:01:57.840><c> use</c><00:01:58.159><c> of</c><00:01:58.479><c> merge</c>

00:01:58.789 --> 00:01:58.799 align:start position:0%
and let's demonstrate the use of merge
 

00:01:58.799 --> 00:02:04.709 align:start position:0%
and let's demonstrate the use of merge
with<00:01:59.040><c> a</c><00:01:59.119><c> bang</c>

00:02:04.709 --> 00:02:04.719 align:start position:0%
 
 

00:02:04.719 --> 00:02:06.709 align:start position:0%
 
again<00:02:05.040><c> we'll</c><00:02:05.280><c> output</c><00:02:05.680><c> the</c><00:02:05.840><c> result</c><00:02:06.399><c> of</c>

00:02:06.709 --> 00:02:06.719 align:start position:0%
again we'll output the result of
 

00:02:06.719 --> 00:02:08.229 align:start position:0%
again we'll output the result of
invoking<00:02:07.439><c> merge</c>

00:02:08.229 --> 00:02:08.239 align:start position:0%
invoking merge
 

00:02:08.239 --> 00:02:10.630 align:start position:0%
invoking merge
on<00:02:08.640><c> cat</c><00:02:09.119><c> and</c><00:02:09.360><c> passing</c><00:02:09.759><c> in</c><00:02:09.920><c> weight</c><00:02:10.319><c> as</c><00:02:10.479><c> an</c>

00:02:10.630 --> 00:02:10.640 align:start position:0%
on cat and passing in weight as an
 

00:02:10.640 --> 00:02:11.830 align:start position:0%
on cat and passing in weight as an
argument

00:02:11.830 --> 00:02:11.840 align:start position:0%
argument
 

00:02:11.840 --> 00:02:13.589 align:start position:0%
argument
but<00:02:12.000><c> this</c><00:02:12.239><c> time</c><00:02:12.400><c> we're</c><00:02:12.640><c> invoking</c><00:02:13.120><c> the</c><00:02:13.280><c> merge</c>

00:02:13.589 --> 00:02:13.599 align:start position:0%
but this time we're invoking the merge
 

00:02:13.599 --> 00:02:19.589 align:start position:0%
but this time we're invoking the merge
method<00:02:14.000><c> with</c><00:02:14.160><c> a</c><00:02:14.239><c> bang</c>

00:02:19.589 --> 00:02:19.599 align:start position:0%
 
 

00:02:19.599 --> 00:02:21.830 align:start position:0%
 
so<00:02:19.840><c> we</c><00:02:20.000><c> see</c><00:02:20.160><c> the</c><00:02:20.319><c> same</c><00:02:20.640><c> output</c><00:02:21.040><c> here</c><00:02:21.680><c> the</c>

00:02:21.830 --> 00:02:21.840 align:start position:0%
so we see the same output here the
 

00:02:21.840 --> 00:02:22.869 align:start position:0%
so we see the same output here the
returned<00:02:22.400><c> hash</c>

00:02:22.869 --> 00:02:22.879 align:start position:0%
returned hash
 

00:02:22.879 --> 00:02:24.869 align:start position:0%
returned hash
includes<00:02:23.200><c> the</c><00:02:23.360><c> key</c><00:02:23.599><c> value</c><00:02:24.000><c> pairs</c><00:02:24.400><c> from</c><00:02:24.640><c> both</c>

00:02:24.869 --> 00:02:24.879 align:start position:0%
includes the key value pairs from both
 

00:02:24.879 --> 00:02:25.910 align:start position:0%
includes the key value pairs from both
the<00:02:25.040><c> calling</c><00:02:25.440><c> hash</c>

00:02:25.910 --> 00:02:25.920 align:start position:0%
the calling hash
 

00:02:25.920 --> 00:02:31.830 align:start position:0%
the calling hash
and<00:02:26.080><c> the</c><00:02:26.239><c> argument</c><00:02:26.800><c> hash</c>

00:02:31.830 --> 00:02:31.840 align:start position:0%
 
 

00:02:31.840 --> 00:02:34.710 align:start position:0%
 
let's<00:02:32.239><c> output</c><00:02:32.720><c> cat</c><00:02:33.120><c> and</c><00:02:33.280><c> weight</c><00:02:33.519><c> below</c><00:02:33.920><c> this</c>

00:02:34.710 --> 00:02:34.720 align:start position:0%
let's output cat and weight below this
 

00:02:34.720 --> 00:02:36.229 align:start position:0%
let's output cat and weight below this
and<00:02:34.879><c> now</c><00:02:35.040><c> we'll</c><00:02:35.200><c> see</c><00:02:35.440><c> something</c><00:02:35.760><c> a</c><00:02:35.840><c> little</c><00:02:36.000><c> bit</c>

00:02:36.229 --> 00:02:36.239 align:start position:0%
and now we'll see something a little bit
 

00:02:36.239 --> 00:02:40.150 align:start position:0%
and now we'll see something a little bit
different

00:02:40.150 --> 00:02:40.160 align:start position:0%
 
 

00:02:40.160 --> 00:02:42.790 align:start position:0%
 
on<00:02:40.319><c> line</c><00:02:40.720><c> two</c><00:02:41.280><c> is</c><00:02:41.440><c> where</c><00:02:41.680><c> we</c><00:02:41.920><c> output</c><00:02:42.319><c> the</c><00:02:42.480><c> cat</c>

00:02:42.790 --> 00:02:42.800 align:start position:0%
on line two is where we output the cat
 

00:02:42.800 --> 00:02:43.750 align:start position:0%
on line two is where we output the cat
hash

00:02:43.750 --> 00:02:43.760 align:start position:0%
hash
 

00:02:43.760 --> 00:02:45.589 align:start position:0%
hash
you<00:02:43.840><c> can</c><00:02:44.080><c> see</c><00:02:44.319><c> that</c><00:02:44.560><c> this</c><00:02:44.800><c> hash</c><00:02:45.200><c> has</c><00:02:45.360><c> been</c>

00:02:45.589 --> 00:02:45.599 align:start position:0%
you can see that this hash has been
 

00:02:45.599 --> 00:02:48.390 align:start position:0%
you can see that this hash has been
permanently<00:02:46.239><c> modified</c><00:02:46.879><c> or</c><00:02:47.120><c> mutated</c>

00:02:48.390 --> 00:02:48.400 align:start position:0%
permanently modified or mutated
 

00:02:48.400 --> 00:02:50.309 align:start position:0%
permanently modified or mutated
that's<00:02:48.640><c> because</c><00:02:49.040><c> merge</c><00:02:49.360><c> with</c><00:02:49.599><c> a</c><00:02:49.680><c> bang</c><00:02:50.080><c> is</c><00:02:50.239><c> a</c>

00:02:50.309 --> 00:02:50.319 align:start position:0%
that's because merge with a bang is a
 

00:02:50.319 --> 00:02:53.750 align:start position:0%
that's because merge with a bang is a
destructive<00:02:51.120><c> method</c>

00:02:53.750 --> 00:02:53.760 align:start position:0%
 
 

00:02:53.760 --> 00:02:56.070 align:start position:0%
 
the<00:02:53.920><c> hash</c><00:02:54.239><c> we</c><00:02:54.400><c> pass</c><00:02:54.720><c> in</c><00:02:54.879><c> as</c><00:02:55.040><c> an</c><00:02:55.200><c> argument</c>

00:02:56.070 --> 00:02:56.080 align:start position:0%
the hash we pass in as an argument
 

00:02:56.080 --> 00:02:57.190 align:start position:0%
the hash we pass in as an argument
weight

00:02:57.190 --> 00:02:57.200 align:start position:0%
weight
 

00:02:57.200 --> 00:03:00.309 align:start position:0%
weight
is<00:02:57.440><c> not</c><00:02:57.680><c> modified</c><00:02:58.400><c> or</c><00:02:58.560><c> mutated</c><00:02:59.760><c> however</c><00:03:00.159><c> the</c>

00:03:00.309 --> 00:03:00.319 align:start position:0%
is not modified or mutated however the
 

00:03:00.319 --> 00:03:01.270 align:start position:0%
is not modified or mutated however the
calling<00:03:00.720><c> hash</c>

00:03:01.270 --> 00:03:01.280 align:start position:0%
calling hash
 

00:03:01.280 --> 00:03:04.390 align:start position:0%
calling hash
cat<00:03:01.920><c> is</c><00:03:02.959><c> so</c><00:03:03.280><c> the</c><00:03:03.440><c> difference</c><00:03:04.000><c> here</c>

00:03:04.390 --> 00:03:04.400 align:start position:0%
cat is so the difference here
 

00:03:04.400 --> 00:03:07.030 align:start position:0%
cat is so the difference here
is<00:03:04.560><c> that</c><00:03:04.800><c> merge</c><00:03:05.200><c> without</c><00:03:05.680><c> the</c><00:03:05.840><c> bank</c><00:03:06.319><c> returns</c><00:03:06.879><c> a</c>

00:03:07.030 --> 00:03:07.040 align:start position:0%
is that merge without the bank returns a
 

00:03:07.040 --> 00:03:08.149 align:start position:0%
is that merge without the bank returns a
new<00:03:07.280><c> hash</c>

00:03:08.149 --> 00:03:08.159 align:start position:0%
new hash
 

00:03:08.159 --> 00:03:10.790 align:start position:0%
new hash
merge<00:03:08.480><c> with</c><00:03:08.720><c> the</c><00:03:08.879><c> bank</c><00:03:09.440><c> is</c><00:03:09.599><c> destructive</c><00:03:10.480><c> and</c>

00:03:10.790 --> 00:03:10.800 align:start position:0%
merge with the bank is destructive and
 

00:03:10.800 --> 00:03:19.840 align:start position:0%
merge with the bank is destructive and
mutates<00:03:11.360><c> the</c><00:03:11.440><c> calling</c><00:03:16.840><c> hash</c>

