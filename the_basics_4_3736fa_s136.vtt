WEBVTT
Kind: captions
Language: en

00:00:04.240 --> 00:00:05.110 align:start position:0%
 
we<00:00:04.400><c> need</c><00:00:04.640><c> to</c>

00:00:05.110 --> 00:00:05.120 align:start position:0%
we need to
 

00:00:05.120 --> 00:00:07.670 align:start position:0%
we need to
store<00:00:05.520><c> the</c><00:00:05.759><c> dates</c><00:00:06.240><c> from</c><00:00:06.480><c> our</c><00:00:06.720><c> movies</c><00:00:07.120><c> hash</c>

00:00:07.670 --> 00:00:07.680 align:start position:0%
store the dates from our movies hash
 

00:00:07.680 --> 00:00:09.350 align:start position:0%
store the dates from our movies hash
into<00:00:07.919><c> an</c><00:00:08.160><c> array</c>

00:00:09.350 --> 00:00:09.360 align:start position:0%
into an array
 

00:00:09.360 --> 00:00:10.950 align:start position:0%
into an array
and<00:00:09.440><c> then</c><00:00:09.599><c> we're</c><00:00:09.760><c> going</c><00:00:09.920><c> to</c><00:00:10.160><c> output</c><00:00:10.639><c> each</c><00:00:10.800><c> of</c>

00:00:10.950 --> 00:00:10.960 align:start position:0%
and then we're going to output each of
 

00:00:10.960 --> 00:00:12.629 align:start position:0%
and then we're going to output each of
them

00:00:12.629 --> 00:00:12.639 align:start position:0%
them
 

00:00:12.639 --> 00:00:19.349 align:start position:0%
them
so<00:00:12.960><c> i'll</c><00:00:13.200><c> initialize</c><00:00:13.920><c> an</c><00:00:14.160><c> array</c><00:00:14.480><c> called</c><00:00:14.920><c> dates</c>

00:00:19.349 --> 00:00:19.359 align:start position:0%
 
 

00:00:19.359 --> 00:00:21.590 align:start position:0%
 
and<00:00:19.760><c> place</c><00:00:20.240><c> each</c><00:00:20.400><c> of</c><00:00:20.560><c> the</c><00:00:20.720><c> values</c><00:00:21.199><c> from</c><00:00:21.439><c> our</c>

00:00:21.590 --> 00:00:21.600 align:start position:0%
and place each of the values from our
 

00:00:21.600 --> 00:00:27.190 align:start position:0%
and place each of the values from our
hash<00:00:22.080><c> as</c><00:00:22.320><c> an</c><00:00:22.480><c> element</c><00:00:23.039><c> in</c><00:00:23.199><c> this</c><00:00:23.439><c> dates</c><00:00:23.760><c> array</c>

00:00:27.190 --> 00:00:27.200 align:start position:0%
 
 

00:00:27.200 --> 00:00:29.269 align:start position:0%
 
[Music]

00:00:29.269 --> 00:00:29.279 align:start position:0%
[Music]
 

00:00:29.279 --> 00:00:31.509 align:start position:0%
[Music]
and<00:00:29.439><c> we</c><00:00:29.599><c> can</c><00:00:29.840><c> go</c><00:00:30.000><c> ahead</c><00:00:30.480><c> and</c><00:00:30.800><c> get</c><00:00:30.960><c> rid</c><00:00:31.119><c> of</c><00:00:31.279><c> this</c>

00:00:31.509 --> 00:00:31.519 align:start position:0%
and we can go ahead and get rid of this
 

00:00:31.519 --> 00:00:33.350 align:start position:0%
and we can go ahead and get rid of this
hash

00:00:33.350 --> 00:00:33.360 align:start position:0%
hash
 

00:00:33.360 --> 00:00:35.510 align:start position:0%
hash
now<00:00:33.520><c> we</c><00:00:33.680><c> need</c><00:00:33.840><c> to</c><00:00:34.079><c> print</c><00:00:34.480><c> each</c><00:00:34.800><c> element</c><00:00:35.200><c> of</c><00:00:35.360><c> our</c>

00:00:35.510 --> 00:00:35.520 align:start position:0%
now we need to print each element of our
 

00:00:35.520 --> 00:00:37.030 align:start position:0%
now we need to print each element of our
dates<00:00:35.840><c> array</c>

00:00:37.030 --> 00:00:37.040 align:start position:0%
dates array
 

00:00:37.040 --> 00:00:39.430 align:start position:0%
dates array
we'll<00:00:37.280><c> do</c><00:00:37.520><c> this</c><00:00:37.840><c> using</c><00:00:38.399><c> array</c><00:00:38.960><c> element</c>

00:00:39.430 --> 00:00:39.440 align:start position:0%
we'll do this using array element
 

00:00:39.440 --> 00:00:41.030 align:start position:0%
we'll do this using array element
reference

00:00:41.030 --> 00:00:41.040 align:start position:0%
reference
 

00:00:41.040 --> 00:00:43.750 align:start position:0%
reference
and<00:00:41.200><c> we</c><00:00:41.360><c> can</c><00:00:41.680><c> access</c><00:00:42.399><c> an</c><00:00:42.640><c> element</c><00:00:43.120><c> of</c><00:00:43.280><c> an</c><00:00:43.440><c> array</c>

00:00:43.750 --> 00:00:43.760 align:start position:0%
and we can access an element of an array
 

00:00:43.760 --> 00:00:45.830 align:start position:0%
and we can access an element of an array
by<00:00:44.000><c> its</c><00:00:44.239><c> index</c>

00:00:45.830 --> 00:00:45.840 align:start position:0%
by its index
 

00:00:45.840 --> 00:00:48.150 align:start position:0%
by its index
the<00:00:46.000><c> first</c><00:00:46.320><c> element</c><00:00:46.800><c> of</c><00:00:46.879><c> the</c><00:00:47.039><c> array</c><00:00:47.440><c> has</c><00:00:47.760><c> index</c>

00:00:48.150 --> 00:00:48.160 align:start position:0%
the first element of the array has index
 

00:00:48.160 --> 00:00:49.110 align:start position:0%
the first element of the array has index
0

00:00:49.110 --> 00:00:49.120 align:start position:0%
0
 

00:00:49.120 --> 00:00:54.069 align:start position:0%
0
the<00:00:49.280><c> second</c><00:00:49.680><c> element</c><00:00:50.160><c> has</c><00:00:50.399><c> index</c><00:00:50.879><c> 1</c><00:00:51.600><c> and</c><00:00:51.760><c> so</c><00:00:52.079><c> on</c>

00:00:54.069 --> 00:00:54.079 align:start position:0%
the second element has index 1 and so on
 

00:00:54.079 --> 00:00:56.869 align:start position:0%
the second element has index 1 and so on
you<00:00:54.239><c> can</c><00:00:54.399><c> see</c><00:00:54.640><c> the</c><00:00:54.879><c> syntax</c><00:00:55.520><c> for</c><00:00:55.920><c> array</c><00:00:56.399><c> element</c>

00:00:56.869 --> 00:00:56.879 align:start position:0%
you can see the syntax for array element
 

00:00:56.879 --> 00:00:57.510 align:start position:0%
you can see the syntax for array element
reference

00:00:57.510 --> 00:00:57.520 align:start position:0%
reference
 

00:00:57.520 --> 00:01:00.869 align:start position:0%
reference
on<00:00:57.760><c> line</c><00:00:58.079><c> three</c><00:00:59.359><c> we</c><00:00:59.600><c> use</c><00:00:59.920><c> a</c><00:01:00.079><c> pair</c><00:01:00.320><c> of</c><00:01:00.480><c> square</c>

00:01:00.869 --> 00:01:00.879 align:start position:0%
on line three we use a pair of square
 

00:01:00.879 --> 00:01:01.910 align:start position:0%
on line three we use a pair of square
brackets

00:01:01.910 --> 00:01:01.920 align:start position:0%
brackets
 

00:01:01.920 --> 00:01:04.469 align:start position:0%
brackets
and<00:01:02.320><c> pass</c><00:01:02.640><c> in</c><00:01:02.800><c> the</c><00:01:03.039><c> index</c><00:01:03.680><c> of</c><00:01:03.840><c> the</c><00:01:04.080><c> element</c>

00:01:04.469 --> 00:01:04.479 align:start position:0%
and pass in the index of the element
 

00:01:04.479 --> 00:01:06.710 align:start position:0%
and pass in the index of the element
that<00:01:04.640><c> we</c><00:01:04.799><c> want</c><00:01:04.960><c> to</c><00:01:05.199><c> reference</c>

00:01:06.710 --> 00:01:06.720 align:start position:0%
that we want to reference
 

00:01:06.720 --> 00:01:09.109 align:start position:0%
that we want to reference
now<00:01:06.880><c> let's</c><00:01:07.119><c> run</c><00:01:07.360><c> our</c><00:01:07.520><c> file</c><00:01:08.080><c> and</c><00:01:08.320><c> we</c><00:01:08.560><c> expect</c><00:01:08.960><c> to</c>

00:01:09.109 --> 00:01:09.119 align:start position:0%
now let's run our file and we expect to
 

00:01:09.119 --> 00:01:10.830 align:start position:0%
now let's run our file and we expect to
output

00:01:10.830 --> 00:01:10.840 align:start position:0%
output
 

00:01:10.840 --> 00:01:14.390 align:start position:0%
output
1975.

00:01:14.390 --> 00:01:14.400 align:start position:0%
 
 

00:01:14.400 --> 00:01:19.990 align:start position:0%
 
and<00:01:14.560><c> that's</c><00:01:14.799><c> what</c><00:01:14.960><c> we</c><00:01:15.119><c> see</c>

00:01:19.990 --> 00:01:20.000 align:start position:0%
 
 

00:01:20.000 --> 00:01:22.630 align:start position:0%
 
so<00:01:20.159><c> let's</c><00:01:20.400><c> go</c><00:01:20.640><c> back</c><00:01:20.880><c> to</c><00:01:21.119><c> our</c><00:01:21.280><c> text</c><00:01:21.600><c> editor</c><00:01:22.240><c> and</c>

00:01:22.630 --> 00:01:22.640 align:start position:0%
so let's go back to our text editor and
 

00:01:22.640 --> 00:01:24.630 align:start position:0%
so let's go back to our text editor and
output<00:01:23.200><c> each</c><00:01:23.439><c> of</c><00:01:23.520><c> the</c><00:01:23.759><c> other</c><00:01:24.000><c> dates</c><00:01:24.320><c> in</c><00:01:24.479><c> our</c>

00:01:24.630 --> 00:01:24.640 align:start position:0%
output each of the other dates in our
 

00:01:24.640 --> 00:01:27.590 align:start position:0%
output each of the other dates in our
array<00:01:24.960><c> as</c><00:01:25.119><c> well</c>

00:01:27.590 --> 00:01:27.600 align:start position:0%
array as well
 

00:01:27.600 --> 00:01:29.990 align:start position:0%
array as well
now<00:01:27.840><c> it's</c><00:01:28.080><c> important</c><00:01:28.479><c> to</c><00:01:28.720><c> note</c><00:01:28.960><c> that</c><00:01:29.360><c> the</c><00:01:29.600><c> last</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
now it's important to note that the last
 

00:01:30.000 --> 00:01:31.190 align:start position:0%
now it's important to note that the last
index<00:01:30.400><c> of</c><00:01:30.560><c> an</c><00:01:30.720><c> array</c>

00:01:31.190 --> 00:01:31.200 align:start position:0%
index of an array
 

00:01:31.200 --> 00:01:33.749 align:start position:0%
index of an array
is<00:01:31.439><c> always</c><00:01:31.759><c> going</c><00:01:32.079><c> to</c><00:01:32.240><c> be</c><00:01:32.640><c> one</c><00:01:32.960><c> less</c><00:01:33.280><c> than</c><00:01:33.520><c> its</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
is always going to be one less than its
 

00:01:33.759 --> 00:01:35.270 align:start position:0%
is always going to be one less than its
size

00:01:35.270 --> 00:01:35.280 align:start position:0%
size
 

00:01:35.280 --> 00:01:37.990 align:start position:0%
size
in<00:01:35.439><c> this</c><00:01:35.680><c> case</c><00:01:36.400><c> our</c><00:01:36.640><c> dates</c><00:01:36.960><c> array</c><00:01:37.360><c> has</c><00:01:37.680><c> five</c>

00:01:37.990 --> 00:01:38.000 align:start position:0%
in this case our dates array has five
 

00:01:38.000 --> 00:01:39.590 align:start position:0%
in this case our dates array has five
elements

00:01:39.590 --> 00:01:39.600 align:start position:0%
elements
 

00:01:39.600 --> 00:01:43.270 align:start position:0%
elements
because<00:01:40.000><c> array</c><00:01:40.640><c> indexes</c><00:01:41.439><c> are</c><00:01:41.759><c> 0</c><00:01:42.159><c> based</c>

00:01:43.270 --> 00:01:43.280 align:start position:0%
because array indexes are 0 based
 

00:01:43.280 --> 00:01:45.510 align:start position:0%
because array indexes are 0 based
the<00:01:43.439><c> last</c><00:01:43.840><c> index</c><00:01:44.320><c> of</c><00:01:44.479><c> our</c><00:01:44.640><c> array</c><00:01:45.040><c> is</c><00:01:45.200><c> going</c><00:01:45.360><c> to</c>

00:01:45.510 --> 00:01:45.520 align:start position:0%
the last index of our array is going to
 

00:01:45.520 --> 00:01:48.870 align:start position:0%
the last index of our array is going to
be<00:01:45.759><c> 4.</c>

00:01:48.870 --> 00:01:48.880 align:start position:0%
 
 

00:01:48.880 --> 00:01:51.030 align:start position:0%
 
so<00:01:49.119><c> let's</c><00:01:49.280><c> run</c><00:01:49.520><c> our</c><00:01:49.680><c> file</c><00:01:50.079><c> and</c><00:01:50.159><c> we'll</c><00:01:50.399><c> see</c><00:01:50.720><c> all</c>

00:01:51.030 --> 00:01:51.040 align:start position:0%
so let's run our file and we'll see all
 

00:01:51.040 --> 00:01:52.550 align:start position:0%
so let's run our file and we'll see all
5<00:01:51.600><c> years</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
5 years
 

00:01:52.560 --> 00:02:01.990 align:start position:0%
5 years
or<00:01:52.799><c> elements</c><00:01:53.280><c> of</c><00:01:53.439><c> our</c><00:01:53.600><c> array</c><00:01:54.560><c> output</c>

00:02:01.990 --> 00:02:02.000 align:start position:0%
 
 

00:02:02.000 --> 00:02:04.789 align:start position:0%
 
remember<00:02:02.560><c> that</c><00:02:02.960><c> arrays</c><00:02:03.520><c> have</c><00:02:03.759><c> a</c><00:02:04.000><c> zero-based</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
remember that arrays have a zero-based
 

00:02:04.799 --> 00:02:05.510 align:start position:0%
remember that arrays have a zero-based
index

00:02:05.510 --> 00:02:05.520 align:start position:0%
index
 

00:02:05.520 --> 00:02:08.630 align:start position:0%
index
and<00:02:05.759><c> element</c><00:02:06.240><c> reference</c><00:02:07.200><c> is</c><00:02:07.360><c> an</c><00:02:07.520><c> easy</c><00:02:07.840><c> way</c><00:02:08.160><c> to</c>

00:02:08.630 --> 00:02:08.640 align:start position:0%
and element reference is an easy way to
 

00:02:08.640 --> 00:02:18.160 align:start position:0%
and element reference is an easy way to
access<00:02:09.119><c> any</c><00:02:09.360><c> element</c><00:02:09.840><c> in</c><00:02:10.000><c> an</c><00:02:15.160><c> array</c>

